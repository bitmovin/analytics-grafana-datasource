{"version":3,"file":"module.js","mappings":"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gBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,gBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,gBACA,iBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBACA,MACA,UACA,UACA,cACA,SACA,aACA,gBACA,kBACA,OACA,aACA,MACA,YACA,WACA,cACA,yBACA,aACA,eACA,YACA,WACA,SACA,yBACA,QACA,kBACA,gCACA,gCACA,iBACA,iBACA,OACA,yBACA,WACA,SACA,aACA,qBACA,cACA,iBACA,kBACA,aACA,aACA,SACA,gBACA,eACA,OACA,UACA,kBACA,gBACA,UACA,gBACA,aACA,OACA,eACA,mBACA,cACA,mBACA,mBACA,2BACA,wBACA,UACA,gBACA,WACA,sBACA,cACA,sBACA,qBACA,QAK0G9I,KACzG+I,IAAsB,CACrBtM,MAAOsM,EACP7L,MAAO6L,MCfEC,EA3IY,CACvB,KACA,oBACA,gBACA,cACA,iBACA,WACA,UACA,iBACA,wBACA,wBACA,WACA,YACA,eACA,OACA,cACA,UACA,UACA,gBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,gBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,gBACA,iBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBACA,MACA,UACA,eACA,cACA,SACA,iBACA,gBACA,WACA,iBACA,WACA,aACA,gBACA,mBACA,kBACA,WACA,OACA,KACA,gBACA,iCACA,aACA,MACA,aACA,UACA,iBACA,WACA,WACA,UACA,cACA,WACA,SACA,QACA,UACA,kBACA,gCACA,gCACA,eACA,iBACA,iBACA,OACA,SACA,WACA,SACA,SACA,qBACA,cACA,iBACA,gBACA,WACA,sBACA,SACA,eACA,gBACA,qBACA,eACA,SACA,OACA,cACA,QACA,gBACA,mBACA,oBACA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","sources":["webpack://bitmovin-analytics-datasource/external amd \"@grafana/data\"","webpack://bitmovin-analytics-datasource/external amd \"@grafana/runtime\"","webpack://bitmovin-analytics-datasource/external amd \"@grafana/ui\"","webpack://bitmovin-analytics-datasource/external amd \"lodash\"","webpack://bitmovin-analytics-datasource/external amd \"react\"","webpack://bitmovin-analytics-datasource/external amd \"rxjs\"","webpack://bitmovin-analytics-datasource/webpack/bootstrap","webpack://bitmovin-analytics-datasource/webpack/runtime/compat get default export","webpack://bitmovin-analytics-datasource/webpack/runtime/define property getters","webpack://bitmovin-analytics-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://bitmovin-analytics-datasource/webpack/runtime/make namespace object","webpack://bitmovin-analytics-datasource/./types/grafanaTypes.ts","webpack://bitmovin-analytics-datasource/./utils/intervalUtils.ts","webpack://bitmovin-analytics-datasource/./utils/dataUtils.ts","webpack://bitmovin-analytics-datasource/./types/metric.ts","webpack://bitmovin-analytics-datasource/./utils/filterUtils.ts","webpack://bitmovin-analytics-datasource/./datasource.ts","webpack://bitmovin-analytics-datasource/./utils/licenses.ts","webpack://bitmovin-analytics-datasource/./types/aggregationMethod.ts","webpack://bitmovin-analytics-datasource/./types/queryAdAttributes.ts","webpack://bitmovin-analytics-datasource/./types/queryAttributes.ts","webpack://bitmovin-analytics-datasource/./components/GroupByInput.tsx","webpack://bitmovin-analytics-datasource/./components/GroupByRow.tsx","webpack://bitmovin-analytics-datasource/./components/OrderByInput.tsx","webpack://bitmovin-analytics-datasource/./components/OrderByRow.tsx","webpack://bitmovin-analytics-datasource/./types/queryFilter.ts","webpack://bitmovin-analytics-datasource/./components/QueryFilterInput.tsx","webpack://bitmovin-analytics-datasource/./components/FilterRow.tsx","webpack://bitmovin-analytics-datasource/./components/QueryEditor.tsx","webpack://bitmovin-analytics-datasource/./module.ts","webpack://bitmovin-analytics-datasource/./components/ConfigEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__241__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { DataSourceJsonData } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\nimport { QueryInterval } from '../utils/intervalUtils';\nimport { QueryAttribute } from './queryAttributes';\nimport { QueryAdAttribute } from './queryAdAttributes';\nimport { Metric } from './metric';\nimport { QueryOrderBy } from './queryOrderBy';\nimport { QueryFilter } from './queryFilter';\nimport { AggregationMethod } from './aggregationMethod';\n\ntype ResultFormat = 'table' | 'time_series';\n\n/**\n * These are the options configurable via the QueryEditor\n * */\nexport interface BitmovinAnalyticsDataQuery extends DataQuery {\n  license: string;\n  interval?: QueryInterval | 'AUTO';\n  metric?: AggregationMethod;\n  dimension?: QueryAttribute | QueryAdAttribute | Metric;\n  groupBy: Array<QueryAttribute | QueryAdAttribute>;\n  orderBy: QueryOrderBy[];\n  limit?: number;\n  filter: QueryFilter[];\n  alias?: string;\n  percentileValue?: number;\n  resultFormat: ResultFormat;\n}\n\n/**\n * @deprecated\n * These are the options query options of the old Angular based plugin\n * */\nexport interface OldBitmovinAnalyticsDataQuery extends DataQuery {\n  license: string;\n  interval?: QueryInterval | 'AUTO';\n  metric?: AggregationMethod;\n  dimension?: QueryAttribute | QueryAdAttribute | Metric;\n  groupBy: Array<QueryAttribute | QueryAdAttribute>;\n  orderBy: QueryOrderBy[];\n  limit?: string;\n  filter: QueryFilter[];\n  alias?: string;\n  percentileValue: number;\n  resultFormat: ResultFormat;\n}\n\nexport const DEFAULT_QUERY: Partial<BitmovinAnalyticsDataQuery> = {\n  license: '',\n  orderBy: [],\n  groupBy: [],\n  filter: [],\n  resultFormat: 'time_series',\n  interval: 'AUTO',\n};\n\n/**\n * These are options configured for each DataSource instance\n */\nexport interface BitmovinDataSourceOptions extends DataSourceJsonData {\n  apiKey: string;\n  tenantOrgId?: string;\n  adAnalytics?: boolean;\n}\n","export type QueryInterval = 'MINUTE' | 'HOUR' | 'DAY';\n\nexport type SelectableQueryInterval = QueryInterval | 'AUTO';\n\nexport const SELECTABLE_QUERY_INTERVALS: Array<{ value: SelectableQueryInterval | 'AUTO'; label: string }> = [\n  { value: 'AUTO', label: 'Auto' },\n  { value: 'MINUTE', label: 'Minute' },\n  { value: 'HOUR', label: 'Hour' },\n  { value: 'DAY', label: 'Day' },\n];\n\nexport const DEFAULT_SELECTABLE_QUERY_INTERVAL = SELECTABLE_QUERY_INTERVALS[0];\n\n/**\n * Get corresponding interval in milliseconds.\n *\n * @param {QueryInterval} interval The interval\n * @returns {number} Interval in milliseconds or -1 if unknown.\n */\nexport const intervalToMilliseconds = (interval: QueryInterval): number => {\n  switch (interval) {\n    case 'MINUTE':\n      return 1000 * 60;\n    case 'HOUR':\n      return 1000 * 60 * 60;\n    case 'DAY':\n      return 1000 * 60 * 60 * 24;\n    default:\n      return -1;\n  }\n};\n\n/**\n * Calculates the Query interval based on a given selected interval, start timestamp and end timestamp\n *\n * @param {SelectableQueryInterval} interval The selected interval\n * @param {number} startTimestamp The start timestamp in milliseconds\n * @param {number} endTimestamp The end timestamp in milliseconds\n * @returns {QueryInterval} calculated Interval as QueryInterval\n */\nexport const calculateQueryInterval = (\n  interval: SelectableQueryInterval,\n  startTimestamp: number,\n  endTimestamp: number\n): QueryInterval => {\n  if (interval !== 'AUTO') {\n    return interval as QueryInterval;\n  }\n\n  const intervalInMilliseconds = endTimestamp - startTimestamp;\n  const minuteIntervalLimitInMilliseconds = 3 * 60 * 60 * 1000; // MINUTE granularity for timeframes below 3h\n  const hourIntervalLimitInMilliseconds = 6 * 24 * 60 * 60 * 1000; // HOUR granularity for timeframes below 6d\n\n  if (intervalInMilliseconds <= minuteIntervalLimitInMilliseconds) {\n    return 'MINUTE';\n  } else if (intervalInMilliseconds <= hourIntervalLimitInMilliseconds) {\n    return 'HOUR';\n  }\n  return 'DAY';\n};\n\n/**\n * Rounds up a timestamp according to the specified query interval.\n *\n * @param {number} startTimestamp The start timestamp of the query.\n * @param {QueryInterval} interval       The query interval.\n * @param {number} dataTimestamp  The timestamp of a data point. Needed to calculate correct Day interval timestamp.\n * @return {number} The rounded up timestamp.\n */\nexport function ceilTimestampAccordingToQueryInterval(\n  startTimestamp: number,\n  interval: QueryInterval,\n  dataTimestamp: number\n): number {\n  const startDate = new Date(startTimestamp);\n  switch (interval) {\n    case 'MINUTE':\n      if (startDate.getSeconds() === 0 && startDate.getMilliseconds() === 0) {\n        return startTimestamp;\n      }\n      return startDate.setMinutes(startDate.getMinutes() + 1, 0, 0);\n    case 'HOUR':\n      if (startDate.getMinutes() === 0 && startDate.getSeconds() === 0 && startDate.getMilliseconds() === 0) {\n        return startTimestamp;\n      }\n      return startDate.setHours(startDate.getHours() + 1, 0, 0, 0);\n    case 'DAY':\n      // Take the hours and minutes value from the datapoint timestamps as the timestamps for the day interval depend on the timezone of the license\n      const dataHours = new Date(dataTimestamp).getHours();\n      const dataMinutes = new Date(dataTimestamp).getMinutes();\n      const startDateWithCorrectTime = new Date(\n        startDate.getFullYear(),\n        startDate.getMonth(),\n        startDate.getDate(),\n        dataHours,\n        dataMinutes\n      );\n\n      if (startDateWithCorrectTime.getTime() > startTimestamp) {\n        return startDateWithCorrectTime.getTime();\n      }\n      return new Date(startDateWithCorrectTime).setDate(startDateWithCorrectTime.getDate() + 1);\n  }\n}\n","import { differenceWith, sortBy, zip } from 'lodash';\nimport { ceilTimestampAccordingToQueryInterval, intervalToMilliseconds, QueryInterval } from './intervalUtils';\nimport { Field, FieldType } from '@grafana/data';\n\nexport type MixedDataRow = Array<string | number>;\nexport type MixedDataRowList = MixedDataRow[];\n\nexport type NumberDataRow = number[];\nexport type NumberDataRowList = NumberDataRow[];\n\n/**\n * Adds padding to a given time series to fill in any missing timestamps for a given interval.\n *\n * @param {MixedDataRowList} data The time series data to be padded. Each data row must have the following structure: [timestamp: number, groupBy1?: string, ... , groupByN?: string, value: number] where each row has the same groupByValue. If the groupByValues differ from row to row, only the groupByValues of the first row are considered.\n * @param {number} startTimestamp The start timestamp in milliseconds for the padding interval.\n * @param {number} endTimestamp The end timestamp in milliseconds for the padding interval.\n * @param {String} interval The interval used for the query, e.g. MINUTE, HOUR, ... .\n * @returns {MixedDataRowList} The padded and sorted time series data.\n */\nexport function padAndSortTimeSeries(\n  data: MixedDataRowList,\n  startTimestamp: number,\n  endTimestamp: number,\n  interval: QueryInterval\n): MixedDataRowList {\n  if (data.length === 0) {\n    return [];\n  }\n\n  const intervalInMs = intervalToMilliseconds(interval);\n  if (intervalInMs < 0) {\n    throw new Error(`Query interval ${interval} is not a valid interval.`);\n  }\n\n  // ceil timestamp to pad data with accurate timestamps and to ignore incomplete first datapoints\n  const ceiledTimestamp = ceilTimestampAccordingToQueryInterval(startTimestamp, interval, data[0][0] as number);\n\n  let dataRows: MixedDataRow = [0];\n  const zeroValueTimeSeries: MixedDataRowList = [];\n\n  // Preserve groupBys in the data if present\n  if (data[0].length > 2) {\n    dataRows = [...data[0].slice(1, -1), 0];\n  }\n\n  // Create zero value time series data for the entire interval\n  for (let timestamp = ceiledTimestamp; timestamp <= endTimestamp; timestamp += intervalInMs) {\n    const row = [timestamp, ...dataRows];\n    zeroValueTimeSeries.push(row);\n  }\n\n  // Find the missing time series data\n  const missingTimestampRows = differenceWith(zeroValueTimeSeries, data, (first, second) => first[0] === second[0]);\n\n  // Pad data with the zero value data\n  const paddedData = data.concat(missingTimestampRows);\n\n  // Sort data by timestamp\n  const sortedData = sortBy(paddedData, (row) => row[0]);\n\n  // Ignore datapoints before ceiled start timestamp to only show complete datapoints and to not overflow graph to the left\n  let index = 0;\n  while (sortedData[index][0] < ceiledTimestamp) {\n    index++;\n  }\n  const trimmedData = sortedData.slice(index);\n\n  return trimmedData;\n}\n\n/**\n * Transforms grouped time series data into the Data Frame format.\n *\n * @param {MixedDataRowList} dataRows The grouped time series data to be transformed. Each data row must have the following structure: [timestamp: number, groupBy1: string, groupBy2: string, ... ,groupByN: string, value: number]\n * @param {number} startTimestamp The start timestamp in milliseconds for the time series data.\n * @param {number} endTimestamp The end timestamp in milliseconds for the time series data.\n * @param {string} interval The interval used for the time series data.\n * @returns {Array<Partial<Field>>} The transformed time series data.\n */\nexport function transformGroupedTimeSeriesData(\n  dataRows: MixedDataRowList,\n  startTimestamp: number,\n  endTimestamp: number,\n  interval: QueryInterval\n): Array<Partial<Field>> {\n  if (dataRows.length === 0) {\n    return [];\n  }\n\n  const fields: Array<Partial<Field>> = [];\n\n  // Group the data by the groupBy values to display multiple time series in one graph\n  const groupedTimeSeriesMap = new Map<string, MixedDataRowList>();\n  dataRows.forEach((row) => {\n    const groupKey = row.slice(1, -1).toString();\n    if (!groupedTimeSeriesMap.has(groupKey)) {\n      groupedTimeSeriesMap.set(groupKey, []);\n    }\n    groupedTimeSeriesMap.get(groupKey)?.push(row as []);\n  });\n\n  // Pad grouped data as there can only be one time field for a graph with multiple time series\n  const paddedTimeSeries: MixedDataRowList[] = [];\n  groupedTimeSeriesMap.forEach((data) => {\n    paddedTimeSeries.push(padAndSortTimeSeries(data, startTimestamp, endTimestamp, interval));\n  });\n\n  // Extract and save timestamps from the first group data\n  const transposedFirstGroupTimeSeriesData = zip(...paddedTimeSeries[0]);\n  const timestamps = transposedFirstGroupTimeSeriesData[0];\n  fields.push({ name: 'Time', values: timestamps as NumberDataRow, type: FieldType.time });\n\n  // Extract time series values per group\n  paddedTimeSeries.forEach((data) => {\n    // Field name consisting of the groupBy values of the current time series\n    const name = data[0].slice(1, -1).join(', ');\n\n    //extract values\n    const columns = zip(...data);\n    const valueColumn = columns.slice(-1);\n\n    fields.push({\n      name: name,\n      values: valueColumn[0] as NumberDataRow,\n      type: FieldType.number,\n    });\n  });\n\n  return fields;\n}\n\n/**\n * Transforms simple time series data into the Data Frame format.\n *\n * @param {NumberDataRowList} dataRows The time series data to be transformed. Each data row must have the following structure: [timestamp: number, value: number]\n * @param {string} columnName The name for the value column in the time series data.\n * @param {number} startTimestamp The start timestamp in milliseconds for the time series data.\n * @param {number} endTimestamp The end timestamp in milliseconds for the time series data.\n * @param {string} interval The interval used for the time series data.\n * @returns {Array<Partial<Field>>} The transformed time series data.\n */\nexport function transformSimpleTimeSeries(\n  dataRows: NumberDataRowList,\n  columnName: string,\n  startTimestamp: number,\n  endTimestamp: number,\n  interval: QueryInterval\n): Array<Partial<Field>> {\n  if (dataRows.length === 0) {\n    return [];\n  }\n\n  const fields: Array<Partial<Field>> = [];\n  const paddedData = padAndSortTimeSeries(dataRows, startTimestamp, endTimestamp, interval);\n  const columns = zip(...paddedData);\n\n  fields.push({ name: 'Time', values: columns[0] as NumberDataRow, type: FieldType.time });\n  fields.push({\n    name: columnName,\n    values: columns[columns.length - 1] as NumberDataRow,\n    type: FieldType.number,\n  });\n\n  return fields;\n}\n\n/**\n * Transforms table data into the Data Frame format.\n *\n * @param {MixedDataRowList} dataRows The table data to be transformed. Each data row must have the following structure: [groupBy1: string, groupBy2: string, ... , groupByN: string, value: number]\n * @param {Array<{ key: string; label: string }>} columnLabels The labels for each column in the table data.\n * @returns {Array<Partial<Field>>} The transformed table data.\n */\nexport function transformTableData(\n  dataRows: MixedDataRowList,\n  columnLabels: Array<{ key: string; label: string }>\n): Array<Partial<Field>> {\n  if (dataRows.length === 0) {\n    return [];\n  }\n\n  const fields: Array<Partial<Field>> = [];\n  const columns = zip(...dataRows);\n\n  let columnNames: string[] = [];\n  if (columnLabels.length === 0) {\n    for (let i = 0; i < columns.length; i++) {\n      columnNames.push(`Column ${i + 1}`);\n    }\n  } else {\n    columnNames.push(...columnLabels.map((label) => label.label));\n  }\n\n  const containsGroupByValues = dataRows[0].length > 1;\n  if (containsGroupByValues) {\n    const groupByColumns = columns.slice(0, -1);\n\n    groupByColumns.forEach((column, index) => {\n      fields.push({\n        name: columnNames[index],\n        values: column as string[],\n        type: FieldType.string,\n      });\n    });\n  }\n\n  // Add the last column as a number field\n  fields.push({\n    name: columnNames[columnNames.length - 1],\n    values: columns[columns.length - 1] as NumberDataRow,\n    type: FieldType.number,\n  });\n\n  return fields;\n}\n","import { SelectableValue } from '@grafana/data';\n\nconst METRICS = ['AVG_CONCURRENTVIEWERS', 'MAX_CONCURRENTVIEWERS', 'AVG-DROPPED-FRAMES'] as const;\n\nexport type Metric = (typeof METRICS)[number];\n\nexport const SELECTABLE_METRICS: Array<SelectableValue<Metric>> = METRICS.map((metric) => ({\n  value: metric,\n  label: metric,\n}));\n\nexport const isMetric = (value: string): value is Metric => {\n  return METRICS.includes(value as Metric);\n};\n","import { isEmpty } from 'lodash';\n\nimport { QueryAdAttribute } from '../types/queryAdAttributes';\nimport { QueryFilterOperator, OutputQueryFilterValue } from '../types/queryFilter';\nimport { QueryAttribute } from '../types/queryAttributes';\n\nconst isNullFilter = (filterAttribute: QueryAttribute | QueryAdAttribute): boolean => {\n  switch (filterAttribute) {\n    case 'CDN_PROVIDER':\n    case 'CUSTOM_DATA_1':\n    case 'CUSTOM_DATA_2':\n    case 'CUSTOM_DATA_3':\n    case 'CUSTOM_DATA_4':\n    case 'CUSTOM_DATA_5':\n    case 'CUSTOM_DATA_6':\n    case 'CUSTOM_DATA_7':\n    case 'CUSTOM_DATA_8':\n    case 'CUSTOM_DATA_9':\n    case 'CUSTOM_DATA_10':\n    case 'CUSTOM_DATA_11':\n    case 'CUSTOM_DATA_12':\n    case 'CUSTOM_DATA_13':\n    case 'CUSTOM_DATA_14':\n    case 'CUSTOM_DATA_15':\n    case 'CUSTOM_DATA_16':\n    case 'CUSTOM_DATA_17':\n    case 'CUSTOM_DATA_18':\n    case 'CUSTOM_DATA_19':\n    case 'CUSTOM_DATA_20':\n    case 'CUSTOM_DATA_21':\n    case 'CUSTOM_DATA_22':\n    case 'CUSTOM_DATA_23':\n    case 'CUSTOM_DATA_24':\n    case 'CUSTOM_DATA_25':\n    case 'CUSTOM_DATA_26':\n    case 'CUSTOM_DATA_27':\n    case 'CUSTOM_DATA_28':\n    case 'CUSTOM_DATA_29':\n    case 'CUSTOM_DATA_30':\n    case 'CUSTOM_USER_ID':\n    case 'ERROR_CODE':\n    case 'EXPERIMENT_NAME':\n    case 'ISP':\n    case 'PLAYER_TECH':\n    case 'PLAYER_VERSION':\n    case 'VIDEO_ID':\n      return true;\n    default:\n      return false;\n  }\n};\n\nconst parseValueForInFilter = (rawValue: string) => {\n  const value: string[] = JSON.parse(rawValue);\n  if (!Array.isArray(value)) {\n    throw new Error();\n  }\n  return value;\n};\n\nconst convertFilterForAds = (rawValue: string, filterAttribute: QueryAdAttribute) => {\n  switch (filterAttribute) {\n    case 'IS_LINEAR':\n      return rawValue === 'true';\n\n    case 'AD_STARTUP_TIME':\n    case 'AD_WRAPPER_ADS_COUNT':\n    case 'AUDIO_BITRATE':\n    case 'CLICK_POSITION':\n    case 'CLOSE_POSITION':\n    case 'ERROR_CODE':\n    case 'MANIFEST_DOWNLOAD_TIME':\n    case 'MIN_SUGGESTED_DURATION':\n    case 'PAGE_LOAD_TIME':\n    case 'PLAYER_STARTUPTIME':\n    case 'SCREEN_HEIGHT':\n    case 'SCREEN_WIDTH':\n    case 'SKIP_POSITION':\n    case 'TIME_HOVERED':\n    case 'TIME_IN_VIEWPORT':\n    case 'TIME_PLAYED':\n    case 'TIME_UNTIL_HOVER':\n    case 'VIDEO_BITRATE':\n    case 'VIDEO_WINDOW_HEIGHT':\n    case 'VIDEO_WINDOW_WIDTH': {\n      const parsedValue = parseInt(rawValue, 10);\n      if (isNaN(parsedValue)) {\n        throw new Error(`Couldn't parse filter value, please provide data as an integer number`);\n      }\n      return parsedValue;\n    }\n\n    case 'CLICK_PERCENTAGE':\n    case 'CLOSE_PERCENTAGE':\n    case 'PERCENTAGE_IN_VIEWPORT':\n    case 'SKIP_PERCENTAGE': {\n      const parsedValue = parseFloat(rawValue);\n      if (isNaN(parsedValue)) {\n        throw new Error(`Couldn't parse filter value, please provide data as a floating point number`);\n      }\n      return parsedValue;\n    }\n\n    default:\n      return rawValue;\n  }\n};\n\nconst convertFilter = (rawValue: string, filterAttribute: QueryAttribute) => {\n  switch (filterAttribute) {\n    case 'IS_CASTING':\n    case 'IS_LIVE':\n    case 'IS_MUTED':\n      return rawValue === 'true';\n\n    case 'AUDIO_BITRATE':\n    case 'BUFFERED':\n    case 'CLIENT_TIME':\n    case 'DOWNLOAD_SPEED':\n    case 'DRM_LOAD_TIME':\n    case 'DROPPED_FRAMES':\n    case 'DURATION':\n    case 'ERROR_CODE':\n    case 'PAGE_LOAD_TIME':\n    case 'PAGE_LOAD_TYPE':\n    case 'PAUSED':\n    case 'PLAYED':\n    case 'PLAYER_STARTUPTIME':\n    case 'SCREEN_HEIGHT':\n    case 'SCREEN_WIDTH':\n    case 'SEEKED':\n    case 'STARTUPTIME':\n    case 'VIDEO_BITRATE':\n    case 'VIDEO_DURATION':\n    case 'VIDEO_PLAYBACK_HEIGHT':\n    case 'VIDEO_PLAYBACK_WIDTH':\n    case 'VIDEO_STARTUPTIME':\n    case 'VIDEO_WINDOW_HEIGHT':\n    case 'VIDEO_WINDOW_WIDTH':\n    case 'VIDEOTIME_END':\n    case 'VIDEOTIME_START':\n    case 'VIEWTIME': {\n      const parsedValue = parseInt(rawValue, 10);\n      if (isNaN(parsedValue)) {\n        throw new Error(`Couldn't parse filter value, please provide data as an integer number`);\n      }\n      return parsedValue;\n    }\n\n    case 'ERROR_PERCENTAGE':\n    case 'REBUFFER_PERCENTAGE': {\n      const parsedValue = parseFloat(rawValue);\n      if (isNaN(parsedValue)) {\n        throw new Error(`Couldn't parse filter value, please provide data as a floating point number`);\n      }\n      return parsedValue;\n    }\n\n    default:\n      return rawValue;\n  }\n};\n\n/**\n * Transforms the string filter Value from the UI to the appropriate type for our API.\n *\n * @param {string} rawValue The raw string value from the Filter Input.\n * @param {QueryAttribute | QueryAdAttribute} filterAttribute The filter attribute.\n * @param {QueryFilterOperator} filterOperator The filter operator.\n * @param {boolean} isAdAnalytics If Ad Analytics are queried.\n * @returns {OutputQueryFilterValue} The correctly converted Filter Value.\n * */\nexport const convertFilterValueToProperType = (\n  rawValue: string,\n  filterAttribute: QueryAttribute | QueryAdAttribute,\n  filterOperator: QueryFilterOperator,\n  isAdAnalytics: boolean\n): OutputQueryFilterValue => {\n  if (isEmpty(rawValue) && isNullFilter(filterAttribute)) {\n    return null;\n  }\n\n  if (filterOperator === 'IN') {\n    try {\n      return parseValueForInFilter(rawValue);\n    } catch (e) {\n      throw new Error(\n        'Couldn\\'t parse IN filter, please provide data in JSON array form (e.g.: [\"Firefox\", \"Chrome\"]).'\n      );\n    }\n  }\n\n  if (isAdAnalytics) {\n    return convertFilterForAds(rawValue, filterAttribute as QueryAdAttribute);\n  }\n  return convertFilter(rawValue, filterAttribute as QueryAttribute);\n};\n","import {\n  CoreApp,\n  createDataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  Field,\n  QueryResultMetaNotice,\n} from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { filter } from 'lodash';\nimport { catchError, lastValueFrom, map, Observable, of } from 'rxjs';\n\nimport {\n  BitmovinDataSourceOptions,\n  BitmovinAnalyticsDataQuery,\n  DEFAULT_QUERY,\n  OldBitmovinAnalyticsDataQuery,\n} from './types/grafanaTypes';\nimport {\n  MixedDataRowList,\n  NumberDataRowList,\n  transformGroupedTimeSeriesData,\n  transformSimpleTimeSeries,\n  transformTableData,\n} from './utils/dataUtils';\nimport { calculateQueryInterval, QueryInterval } from './utils/intervalUtils';\nimport { isMetric, Metric } from './types/metric';\nimport { AggregationMethod } from './types/aggregationMethod';\nimport { ProperTypedQueryFilter } from './types/queryFilter';\nimport { QueryAttribute } from './types/queryAttributes';\nimport { QueryAdAttribute } from './types/queryAdAttributes';\nimport { QueryOrderBy } from './types/queryOrderBy';\nimport { convertFilterValueToProperType } from './utils/filterUtils';\n\ntype BitmovinAnalyticsRequestQuery = {\n  licenseKey: string;\n  start: Date;\n  end: Date;\n  filters: ProperTypedQueryFilter[];\n  groupBy: Array<QueryAttribute | QueryAdAttribute>;\n  orderBy: QueryOrderBy[];\n  dimension?: QueryAttribute | QueryAdAttribute;\n  metric?: Metric;\n  interval?: QueryInterval;\n  limit?: number;\n  percentile?: number;\n};\n\nexport class DataSource extends DataSourceApi<\n  BitmovinAnalyticsDataQuery | OldBitmovinAnalyticsDataQuery,\n  BitmovinDataSourceOptions\n> {\n  baseUrl: string;\n  apiKey: string;\n  tenantOrgId?: string;\n  adAnalytics?: boolean;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<BitmovinDataSourceOptions>) {\n    super(instanceSettings);\n\n    this.apiKey = instanceSettings.jsonData.apiKey;\n    this.tenantOrgId = instanceSettings.jsonData.tenantOrgId;\n    this.adAnalytics = instanceSettings.jsonData.adAnalytics;\n    this.baseUrl = instanceSettings.url!;\n  }\n\n  getDefaultQuery(_: CoreApp): Partial<BitmovinAnalyticsDataQuery> {\n    return DEFAULT_QUERY;\n  }\n\n  /**\n   * The Bitmovin API Response follows these rules:\n   * - If the interval property is provided in the request query, time series data is returned and the first value of each row is a timestamp in milliseconds.\n   * - If the groupBy property array is not empty in the request query:\n   *    - Depending on whether the interval property is set:\n   *      - Interval is set: All values between the first one (timestamp) and the last one (not included) can be considered string values.\n   *      - Interval is not set: All values up to the last one (not included) can be considered string values\n   * - The last value of each row is always be a number.\n   * */\n  async query(options: DataQueryRequest<BitmovinAnalyticsDataQuery>): Promise<DataQueryResponse> {\n    const { range } = options;\n    const from = range!.from.toDate();\n    const to = range!.to.toDate();\n\n    //filter disabled queries\n    const enabledQueries = (options.targets = filter(options.targets, (t) => !t.hide));\n\n    const promises = enabledQueries.map(async (target) => {\n      const interval =\n        target.resultFormat === 'time_series' && target.interval\n          ? calculateQueryInterval(target.interval, from.getTime(), to.getTime())\n          : undefined;\n\n      let aggregationMethod: AggregationMethod | undefined = target.metric;\n      const percentileValue = aggregationMethod === 'percentile' ? target.percentileValue : undefined;\n\n      let metric: Metric | undefined = undefined;\n      let dimension: QueryAttribute | QueryAdAttribute | undefined = undefined;\n      if (target.dimension) {\n        if (isMetric(target.dimension)) {\n          metric = target.dimension as Metric;\n        } else {\n          dimension = target.dimension as QueryAttribute | QueryAdAttribute;\n        }\n      }\n\n      const filters: ProperTypedQueryFilter[] = target.filter.map((filter) => {\n        return {\n          name: filter.name,\n          operator: filter.operator,\n          value: convertFilterValueToProperType(filter.value, filter.name, filter.operator, !!this.adAnalytics),\n        };\n      });\n\n      const query: BitmovinAnalyticsRequestQuery = {\n        filters: filters,\n        groupBy: target.groupBy,\n        orderBy: target.orderBy,\n        dimension: dimension,\n        metric: metric,\n        start: from,\n        end: to,\n        licenseKey: target.license,\n        interval: interval,\n        limit: this.parseLimit(target.limit),\n        percentile: percentileValue,\n      };\n\n      const response = await lastValueFrom(this.request(this.getRequestUrl(metric, aggregationMethod), 'POST', query));\n\n      const dataRows: MixedDataRowList = response.data.data.result.rows;\n      const dataRowCount: number = response.data.data.result.rowCount;\n      const columnLabels: Array<{ key: string; label: string }> = response.data.data.result.columnLabels;\n\n      const fields: Array<Partial<Field>> = [];\n\n      // Determine the appropriate transformation based on query parameters\n      if (query.interval && query.groupBy?.length > 0) {\n        // If the query has an interval and group by columns, transform the data as grouped time series\n        fields.push(...transformGroupedTimeSeriesData(dataRows, from.getTime(), to.getTime(), query.interval));\n      } else {\n        if (query.interval) {\n          // If the query has an interval but no group by columns, transform the data as simple time series\n          fields.push(\n            ...transformSimpleTimeSeries(\n              dataRows as NumberDataRowList,\n              columnLabels.length > 0 ? columnLabels[columnLabels.length - 1].label : 'Column 1',\n              from.getTime(),\n              to.getTime(),\n              query.interval\n            )\n          );\n        } else {\n          // If no interval is specified, transform the data as table data\n          fields.push(...transformTableData(dataRows, columnLabels));\n        }\n      }\n\n      let metaNotices: QueryResultMetaNotice[] = [];\n      if (dataRowCount >= 200) {\n        metaNotices = [\n          {\n            severity: 'warning',\n            text: 'Your request reached the max row limit of the API. You might see incomplete data. This problem might be caused by the use of high cardinality columns in group by, too small interval, or too big of a time range.',\n          },\n        ];\n      }\n\n      return createDataFrame({\n        name: target.alias,\n        fields: fields,\n        meta: { notices: metaNotices },\n      });\n    });\n\n    return Promise.all(promises).then((data) => ({ data }));\n  }\n\n  /** needed because of old plugin logic where limit was saved as string and not as number */\n  parseLimit(limit: number | string | undefined): undefined | number {\n    if (limit == null) {\n      return undefined;\n    }\n\n    if (Number.isInteger(limit)) {\n      return limit as number;\n    } else {\n      return parseInt(limit as string, 10);\n    }\n  }\n\n  getRequestUrl(metric?: Metric, aggregation?: AggregationMethod): string {\n    let url = '/analytics';\n    if (this.adAnalytics === true) {\n      url += '/ads';\n    }\n\n    if (metric != null) {\n      return url + '/metrics/' + metric;\n    }\n\n    return url + '/queries/' + aggregation;\n  }\n\n  request(url: string, method: string, payload?: any): Observable<Record<any, any>> {\n    const headers: Record<string, string>= { 'X-Api-Key': this.apiKey}\n    if (this.tenantOrgId != null) {\n      headers[\"X-Tenant-Org-Id\"] = this.tenantOrgId\n    }\n    const options = {\n      url: this.baseUrl + url,\n      headers: headers,\n      method: method,\n      data: payload,\n    };\n\n    return getBackendSrv().fetch(options);\n  }\n\n  async testDatasource() {\n    return lastValueFrom(\n      this.request('/analytics/licenses', 'GET').pipe(\n        map(() => {\n          return {\n            status: 'success',\n            message: 'Data source successfully setup and connected.',\n          };\n        }),\n        catchError((err) => {\n          let message = 'Bitmovin: ';\n          if (err.status) {\n            message += err.status + ' ';\n          }\n          if (err.statusText) {\n            message += err.statusText;\n          } else {\n            message += 'Can not connect to Bitmovin API';\n          }\n\n          let errorMessage = err.data?.message || err.data?.data?.message;\n\n          //additional errorDetails like requestId and timestamp if requestId is set\n          let errorDetails;\n          if (err.data?.requestId) {\n            errorDetails = 'Timestamp: ' + new Date().toISOString();\n            errorDetails += err.data?.requestId ? '\\nRequestId: ' + err.data?.requestId : '';\n          }\n\n          return of({\n            status: 'error',\n            message: message,\n            details: { message: errorMessage, verboseMessage: errorDetails },\n          });\n        })\n      )\n    );\n  }\n}\n","import { lastValueFrom } from 'rxjs';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { SelectableValue } from '@grafana/data';\n\ntype AnalyticsLicense = {\n  readonly name: string;\n  readonly id: string;\n  readonly licenseKey?: string;\n};\n\nconst licenseEndpoints = [\n  {\n    endpoint: '/analytics/licenses',\n    mapperFunc: (license: AnalyticsLicense): SelectableValue => ({\n      value: license.licenseKey,\n      label: license.name ? license.name : license.licenseKey,\n    }),\n  },\n  {\n    endpoint: '/analytics/virtual-licenses',\n    mapperFunc: (license: AnalyticsLicense): SelectableValue => ({\n      value: license.id,\n      label: license.name ? license.name : license.id,\n    }),\n  },\n  {\n    endpoint: '/analytics/demo-licenses',\n    mapperFunc: (license: AnalyticsLicense): SelectableValue => ({\n      value: license.id,\n      label: license.name ? license.name : license.id,\n    }),\n  },\n];\n\nasync function fetchLicensesForEndpoint(\n  url: string,\n  apiKey: string,\n  mapperFunc: (license: AnalyticsLicense) => SelectableValue,\n  tenantOrgId?: string\n) {\n  const headers: Record<string, string>= { 'X-Api-Key': apiKey}\n  if (tenantOrgId != null) {\n    headers[\"X-Tenant-Org-Id\"] = tenantOrgId\n  }\n  const options = {\n    url: url,\n    headers: headers,\n    method: 'GET',\n  };\n\n  const response = await lastValueFrom(getBackendSrv().fetch(options));\n  // @ts-ignore\n  const licenses = response.data.data.result.items;\n\n  const selectableLicenses = [];\n  for (const license of licenses) {\n    selectableLicenses.push(mapperFunc(license));\n  }\n\n  return selectableLicenses;\n}\n\nexport async function fetchLicenses(apiKey: string, baseUrl: string, tenantOrgId?: string): Promise<SelectableValue[]> {\n  const allLicenses: SelectableValue[] = [];\n\n  for (const licenseEndpoint of licenseEndpoints) {\n    const licenses = await fetchLicensesForEndpoint(\n      baseUrl + licenseEndpoint.endpoint,\n      apiKey,\n      licenseEndpoint.mapperFunc,\n      tenantOrgId\n    );\n    allLicenses.push(...licenses);\n  }\n\n  return allLicenses;\n}\n","import type { SelectableValue } from '@grafana/data';\n\nconst AGGREGATION_METHODS = [\n  'count',\n  'sum',\n  'avg',\n  'min',\n  'max',\n  'stddev',\n  'percentile',\n  'variance',\n  'median',\n] as const;\n\nexport type AggregationMethod = (typeof AGGREGATION_METHODS)[number];\n\nexport const SELECTABLE_AGGREGATION_METHODS: Array<SelectableValue<AggregationMethod>> = AGGREGATION_METHODS.map(\n  (aggregation) => ({\n    value: aggregation,\n    label: aggregation,\n  })\n);\n","import { SelectableValue } from '@grafana/data';\n\nconst QUERY_AD_ATTRIBUTES = [\n  'ADVERTISER_NAME',\n  'AD_CLICKTHROUGH_URL',\n  'AD_DESCRIPTION',\n  'AD_DURATION',\n  'AD_FALLBACK_INDEX',\n  'AD_ID',\n  'AD_ID_PLAYER',\n  'AD_IMPRESSION_ID',\n  'AD_IS_PERSISTENT',\n  'AD_MODULE',\n  'AD_OFFSET',\n  'AD_PLAYBACK_HEIGHT',\n  'AD_PLAYBACK_WIDTH',\n  'AD_POSITION',\n  'AD_PRELOAD_OFFSET',\n  'AD_REPLACE_CONTENT_DURATION',\n  'AD_SCHEDULE_TIME',\n  'AD_SKIPPABLE',\n  'AD_SKIP_AFTER',\n  'AD_STARTUP_TIME',\n  'AD_SYSTEM',\n  'AD_TAG_PATH',\n  'AD_TAG_SERVER',\n  'AD_TAG_TYPE',\n  'AD_TAG_URL',\n  'AD_TITLE',\n  'AD_WRAPPER_ADS_COUNT',\n  'ANALYTICS_VERSION',\n  'APIORG_ID',\n  'APIUSER_ID',\n  'API_FRAMEWORK',\n  'AUDIO_BITRATE',\n  'AUTOPLAY',\n  'BROWSER',\n  'BROWSER_IS_BOT',\n  'BROWSER_VERSION_MAJOR',\n  'BROWSER_VERSION_MINOR',\n  'CDN_PROVIDER',\n  'CITY',\n  'CLICKED',\n  'CLICK_PERCENTAGE',\n  'CLICK_POSITION',\n  'CLICK_RATE',\n  'CLIENT_TIME',\n  'CLOSED',\n  'CLOSE_PERCENTAGE',\n  'CLOSE_POSITION',\n  'COMPLETED',\n  'COUNTRY',\n  'CREATIVE_AD_ID',\n  'CREATIVE_ID',\n  'CUSTOM_DATA_1',\n  'CUSTOM_DATA_10',\n  'CUSTOM_DATA_11',\n  'CUSTOM_DATA_12',\n  'CUSTOM_DATA_13',\n  'CUSTOM_DATA_14',\n  'CUSTOM_DATA_15',\n  'CUSTOM_DATA_16',\n  'CUSTOM_DATA_17',\n  'CUSTOM_DATA_18',\n  'CUSTOM_DATA_19',\n  'CUSTOM_DATA_2',\n  'CUSTOM_DATA_20',\n  'CUSTOM_DATA_21',\n  'CUSTOM_DATA_22',\n  'CUSTOM_DATA_23',\n  'CUSTOM_DATA_24',\n  'CUSTOM_DATA_25',\n  'CUSTOM_DATA_26',\n  'CUSTOM_DATA_27',\n  'CUSTOM_DATA_28',\n  'CUSTOM_DATA_29',\n  'CUSTOM_DATA_3',\n  'CUSTOM_DATA_30',\n  'CUSTOM_DATA_4',\n  'CUSTOM_DATA_5',\n  'CUSTOM_DATA_6',\n  'CUSTOM_DATA_7',\n  'CUSTOM_DATA_8',\n  'CUSTOM_DATA_9',\n  'CUSTOM_USER_ID',\n  'DAY',\n  'DAYPART',\n  'DEAL_ID',\n  'DEVICE_TYPE',\n  'DOMAIN',\n  'ERROR_CODE',\n  'ERROR_MESSAGE',\n  'EXPERIMENT_NAME',\n  'HOUR',\n  'IP_ADDRESS',\n  'ISP',\n  'IS_LINEAR',\n  'LANGUAGE',\n  'LICENSE_KEY',\n  'MANIFEST_DOWNLOAD_TIME',\n  'MEDIA_PATH',\n  'MEDIA_SERVER',\n  'MEDIA_URL',\n  'MIDPOINT',\n  'MINUTE',\n  'MIN_SUGGESTED_DURATION',\n  'MONTH',\n  'OPERATINGSYSTEM',\n  'OPERATINGSYSTEM_VERSION_MAJOR',\n  'OPERATINGSYSTEM_VERSION_MINOR',\n  'PAGE_LOAD_TIME',\n  'PAGE_LOAD_TYPE',\n  'PATH',\n  'PERCENTAGE_IN_VIEWPORT',\n  'PLATFORM',\n  'PLAYER',\n  'PLAYER_KEY',\n  'PLAYER_STARTUPTIME',\n  'PLAYER_TECH',\n  'PLAYER_VERSION',\n  'PLAY_PERCENTAGE',\n  'QUARTILE_1',\n  'QUARTILE_3',\n  'REGION',\n  'SCREEN_HEIGHT',\n  'SCREEN_WIDTH',\n  'SIZE',\n  'SKIPPED',\n  'SKIP_PERCENTAGE',\n  'SKIP_POSITION',\n  'STARTED',\n  'STREAM_FORMAT',\n  'SURVEY_URL',\n  'TIME',\n  'TIME_HOVERED',\n  'TIME_IN_VIEWPORT',\n  'TIME_PLAYED',\n  'TIME_TO_FIRST_AD',\n  'TIME_UNTIL_HOVER',\n  'UNIVERSAL_AD_ID_REGISTRY',\n  'UNIVERSAL_AD_ID_VALUE',\n  'USER_ID',\n  'VIDEO_BITRATE',\n  'VIDEO_ID',\n  'VIDEO_IMPRESSION_ID',\n  'VIDEO_TITLE',\n  'VIDEO_WINDOW_HEIGHT',\n  'VIDEO_WINDOW_WIDTH',\n  'YEAR',\n] as const;\n\nexport type QueryAdAttribute = (typeof QUERY_AD_ATTRIBUTES)[number];\n\nexport const SELECTABLE_QUERY_AD_ATTRIBUTES: Array<SelectableValue<QueryAdAttribute>> = QUERY_AD_ATTRIBUTES.map(\n  (queryAdAttribute) => ({\n    value: queryAdAttribute,\n    label: queryAdAttribute,\n  })\n);\n","import { SelectableValue } from '@grafana/data';\n\nconst QUERY_ATTRIBUTES = [\n  'AD',\n  'ANALYTICS_VERSION',\n  'AUDIO_BITRATE',\n  'AUDIO_CODEC',\n  'AUDIO_LANGUAGE',\n  'AUTOPLAY',\n  'BROWSER',\n  'BROWSER_IS_BOT',\n  'BROWSER_VERSION_MAJOR',\n  'BROWSER_VERSION_MINOR',\n  'BUFFERED',\n  'CAST_TECH',\n  'CDN_PROVIDER',\n  'CITY',\n  'CLIENT_TIME',\n  'CONTEXT',\n  'COUNTRY',\n  'CUSTOM_DATA_1',\n  'CUSTOM_DATA_10',\n  'CUSTOM_DATA_11',\n  'CUSTOM_DATA_12',\n  'CUSTOM_DATA_13',\n  'CUSTOM_DATA_14',\n  'CUSTOM_DATA_15',\n  'CUSTOM_DATA_16',\n  'CUSTOM_DATA_17',\n  'CUSTOM_DATA_18',\n  'CUSTOM_DATA_19',\n  'CUSTOM_DATA_2',\n  'CUSTOM_DATA_20',\n  'CUSTOM_DATA_21',\n  'CUSTOM_DATA_22',\n  'CUSTOM_DATA_23',\n  'CUSTOM_DATA_24',\n  'CUSTOM_DATA_25',\n  'CUSTOM_DATA_26',\n  'CUSTOM_DATA_27',\n  'CUSTOM_DATA_28',\n  'CUSTOM_DATA_29',\n  'CUSTOM_DATA_3',\n  'CUSTOM_DATA_30',\n  'CUSTOM_DATA_4',\n  'CUSTOM_DATA_5',\n  'CUSTOM_DATA_6',\n  'CUSTOM_DATA_7',\n  'CUSTOM_DATA_8',\n  'CUSTOM_DATA_9',\n  'CUSTOM_USER_ID',\n  'DAY',\n  'DAYPART',\n  'DEVICE_CLASS',\n  'DEVICE_TYPE',\n  'DOMAIN',\n  'DOWNLOAD_SPEED',\n  'DRM_LOAD_TIME',\n  'DRM_TYPE',\n  'DROPPED_FRAMES',\n  'DURATION',\n  'ERROR_CODE',\n  'ERROR_MESSAGE',\n  'ERROR_PERCENTAGE',\n  'EXPERIMENT_NAME',\n  'FUNCTION',\n  'HOUR',\n  'ID',\n  'IMPRESSION_ID',\n  'INITIAL_TIME_TO_TARGET_LATENCY',\n  'IP_ADDRESS',\n  'ISP',\n  'IS_CASTING',\n  'IS_LIVE',\n  'IS_LOW_LATENCY',\n  'IS_MUTED',\n  'LANGUAGE',\n  'LATENCY',\n  'LICENSE_KEY',\n  'M3U8_URL',\n  'MINUTE',\n  'MONTH',\n  'MPD_URL',\n  'OPERATINGSYSTEM',\n  'OPERATINGSYSTEM_VERSION_MAJOR',\n  'OPERATINGSYSTEM_VERSION_MINOR',\n  'ORGANIZATION',\n  'PAGE_LOAD_TIME',\n  'PAGE_LOAD_TYPE',\n  'PATH',\n  'PAUSED',\n  'PLATFORM',\n  'PLAYED',\n  'PLAYER',\n  'PLAYER_STARTUPTIME',\n  'PLAYER_TECH',\n  'PLAYER_VERSION',\n  'PLAY_ATTEMPTS',\n  'PROG_URL',\n  'REBUFFER_PERCENTAGE',\n  'REGION',\n  'SCALE_FACTOR',\n  'SCREEN_HEIGHT',\n  'SCREEN_ORIENTATION',\n  'SCREEN_WIDTH',\n  'SEEKED',\n  'SIZE',\n  'STARTUPTIME',\n  'STATE',\n  'STREAM_FORMAT',\n  'SUBTITLE_ENABLED',\n  'SUBTITLE_LANGUAGE',\n  'SUPPORTED_VIDEO_CODECS',\n  'TARGET_LATENCY',\n  'TARGET_LATENCY_DELTA',\n  'TIME',\n  'TIME_TO_TARGET_LATENCY',\n  'USER_ID',\n  'VIDEOSTART_FAILED',\n  'VIDEOSTART_FAILED_REASON',\n  'VIDEOTIME_END',\n  'VIDEOTIME_START',\n  'VIDEO_BITRATE',\n  'VIDEO_CODEC',\n  'VIDEO_CODEC_TYPE',\n  'VIDEO_DURATION',\n  'VIDEO_ID',\n  'VIDEO_PLAYBACK_HEIGHT',\n  'VIDEO_PLAYBACK_WIDTH',\n  'VIDEO_SEGMENTS_DOWNLOADED',\n  'VIDEO_SEGMENTS_DOWNLOAD_SIZE',\n  'VIDEO_STARTUPTIME',\n  'VIDEO_TITLE',\n  'VIDEO_WINDOW_HEIGHT',\n  'VIDEO_WINDOW_WIDTH',\n  'VIEWTIME',\n  'YEAR',\n] as const;\n\nexport type QueryAttribute = (typeof QUERY_ATTRIBUTES)[number];\n\nexport const SELECTABLE_QUERY_ATTRIBUTES: Array<SelectableValue<QueryAttribute>> = QUERY_ATTRIBUTES.map(\n  (queryAttribute) => ({\n    value: queryAttribute,\n    label: queryAttribute,\n  })\n);\n","import React from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { HorizontalGroup, IconButton, Select } from '@grafana/ui';\n\nimport { QueryAttribute } from '../types/queryAttributes';\nimport { QueryAdAttribute } from '../types/queryAdAttributes';\nimport { isEmpty } from 'lodash';\n\nexport enum REORDER_DIRECTION {\n  UP,\n  DOWN,\n}\n\ntype Props = {\n  readonly groupBy: SelectableValue<QueryAttribute | QueryAdAttribute>;\n  readonly selectableGroupBys: Array<SelectableValue<QueryAttribute | QueryAdAttribute>>;\n  readonly onDelete: () => void;\n  readonly onChange: (newValue: QueryAdAttribute | QueryAttribute) => void;\n  readonly isFirst: boolean;\n  readonly isLast: boolean;\n  readonly onReorderGroupBy: (direction: REORDER_DIRECTION) => void;\n};\n\nexport function GroupByInput(props: Props) {\n  return (\n    <HorizontalGroup>\n      <Select\n        value={isEmpty(props.groupBy) ? undefined : props.groupBy}\n        onChange={(selectableValue) => props.onChange(selectableValue.value!)}\n        options={props.selectableGroupBys}\n        width={30}\n      />\n      <IconButton\n        tooltip=\"Move down\"\n        onClick={() => props.onReorderGroupBy(REORDER_DIRECTION.DOWN)}\n        name=\"arrow-down\"\n        disabled={props.isLast}\n      />\n      <IconButton\n        tooltip=\"Move up\"\n        onClick={() => props.onReorderGroupBy(REORDER_DIRECTION.UP)}\n        name=\"arrow-up\"\n        disabled={props.isFirst}\n      />\n      <IconButton tooltip=\"Delete Group By\" name=\"trash-alt\" onClick={props.onDelete} size=\"lg\" variant=\"destructive\" />\n    </HorizontalGroup>\n  );\n}\n","import React from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { Box, IconButton, VerticalGroup } from '@grafana/ui';\nimport { differenceWith } from 'lodash';\n\nimport { QueryAdAttribute, SELECTABLE_QUERY_AD_ATTRIBUTES } from '../types/queryAdAttributes';\nimport { QueryAttribute, SELECTABLE_QUERY_ATTRIBUTES } from '../types/queryAttributes';\nimport { GroupByInput, REORDER_DIRECTION } from './GroupByInput';\n\nconst getSelectableGroupByOptions = (\n  selectedGroupBys: Array<QueryAttribute | QueryAdAttribute>,\n  isAdAnalytics: boolean\n): Array<SelectableValue<QueryAttribute | QueryAdAttribute>> => {\n  if (isAdAnalytics) {\n    return differenceWith(\n      SELECTABLE_QUERY_AD_ATTRIBUTES,\n      selectedGroupBys,\n      (selectableValue, selectedValue) => selectableValue.value === selectedValue\n    );\n  } else {\n    return differenceWith(\n      SELECTABLE_QUERY_ATTRIBUTES,\n      selectedGroupBys,\n      (selectableValue, selectedValue) => selectableValue.value === selectedValue\n    );\n  }\n};\n\nconst mapGroupByToSelectableValue = (\n  selectedGroupBy: QueryAttribute | QueryAdAttribute,\n  isAdAnalytics: boolean\n): SelectableValue<QueryAttribute | QueryAdAttribute> => {\n  if (isAdAnalytics) {\n    return SELECTABLE_QUERY_AD_ATTRIBUTES.filter((selectableValue) => selectableValue.value === selectedGroupBy);\n  } else {\n    return SELECTABLE_QUERY_ATTRIBUTES.filter((selectableValue) => selectableValue.value === selectedGroupBy);\n  }\n};\n\ntype Props = {\n  readonly isAdAnalytics: boolean;\n  readonly onChange: (newGroupBys: Array<QueryAttribute | QueryAdAttribute>) => void;\n  readonly groupBys: Array<QueryAttribute | QueryAdAttribute>;\n};\n\nexport function GroupByRow(props: Props) {\n  const deleteGroupByInput = (index: number) => {\n    const newSelectedGroupBys = [...props.groupBys];\n    newSelectedGroupBys.splice(index, 1);\n\n    props.onChange(newSelectedGroupBys);\n  };\n\n  const onSelectedGroupByChange = (index: number, newSelectedGroupBy: QueryAttribute | QueryAdAttribute) => {\n    const newSelectedGroupBys = [...props.groupBys];\n    newSelectedGroupBys.splice(index, 1, newSelectedGroupBy);\n\n    props.onChange(newSelectedGroupBys);\n  };\n\n  const reorderGroupBy = (direction: REORDER_DIRECTION, index: number) => {\n    const newSelectedGroupBys = [...props.groupBys];\n    const groupByToMove = newSelectedGroupBys[index];\n    newSelectedGroupBys.splice(index, 1);\n\n    const newIndex = direction === REORDER_DIRECTION.UP ? index - 1 : index + 1;\n    newSelectedGroupBys.splice(newIndex, 0, groupByToMove);\n\n    props.onChange(newSelectedGroupBys);\n  };\n\n  const addGroupByInput = () => {\n    const newDefaultSelectedValue = getSelectableGroupByOptions(props.groupBys, props.isAdAnalytics)[0].value!;\n    props.onChange([...props.groupBys, newDefaultSelectedValue]);\n  };\n\n  return (\n    <VerticalGroup>\n      {props.groupBys.map((item, index, selectedGroupBysArray) => (\n        <GroupByInput\n          key={index}\n          groupBy={mapGroupByToSelectableValue(item, props.isAdAnalytics)}\n          onChange={(newValue: QueryAdAttribute | QueryAttribute) => onSelectedGroupByChange(index, newValue)}\n          selectableGroupBys={getSelectableGroupByOptions(selectedGroupBysArray, props.isAdAnalytics)}\n          onDelete={() => deleteGroupByInput(index)}\n          isFirst={index === 0}\n          isLast={index === selectedGroupBysArray.length - 1}\n          onReorderGroupBy={(direction: REORDER_DIRECTION) => reorderGroupBy(direction, index)}\n        />\n      ))}\n      <Box paddingTop={props.groupBys.length === 0 ? 0.5 : 0}>\n        <IconButton name=\"plus-square\" tooltip=\"Add Group By\" onClick={() => addGroupByInput()} size=\"xl\" />\n      </Box>\n    </VerticalGroup>\n  );\n}\n","import React from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { HorizontalGroup, IconButton, RadioButtonGroup, Select } from '@grafana/ui';\n\nimport { QueryAttribute } from '../types/queryAttributes';\nimport { QueryAdAttribute } from '../types/queryAdAttributes';\nimport { QuerySortOrder } from '../types/queryOrderBy';\nimport { REORDER_DIRECTION } from './GroupByInput';\nimport { isEmpty } from 'lodash';\n\ntype Props = {\n  readonly isAdAnalytics: boolean;\n  readonly attribute: SelectableValue<QueryAttribute | QueryAdAttribute>;\n  readonly selectableOrderByAttributes: Array<SelectableValue<QueryAttribute | QueryAdAttribute>>;\n  readonly onAttributeChange: (newValue: SelectableValue<QueryAdAttribute | QueryAttribute>) => void;\n  readonly sortOrder: QuerySortOrder;\n  readonly onSortOrderChange: (newValue: QuerySortOrder) => void;\n  readonly onDelete: () => void;\n  readonly isFirst: boolean;\n  readonly isLast: boolean;\n  readonly onReorderOrderBy: (direction: REORDER_DIRECTION) => void;\n};\n\nconst sortOrderOption: Array<SelectableValue<QuerySortOrder>> = [\n  { value: 'ASC', description: 'Sort by ascending', icon: 'sort-amount-up' },\n  { value: 'DESC', description: 'Sort by descending', icon: 'sort-amount-down' },\n];\n\nexport function OrderByInput(props: Props) {\n  return (\n    <HorizontalGroup spacing=\"xs\">\n      <Select\n        value={isEmpty(props.attribute) ? undefined : props.attribute}\n        onChange={(selectableValue) => props.onAttributeChange(selectableValue)}\n        options={props.selectableOrderByAttributes}\n        width={30}\n      />\n      <RadioButtonGroup\n        options={sortOrderOption}\n        value={props.sortOrder}\n        onChange={(value) => props.onSortOrderChange(value)}\n      />\n      <IconButton\n        tooltip=\"Move down\"\n        onClick={() => props.onReorderOrderBy(REORDER_DIRECTION.DOWN)}\n        name=\"arrow-down\"\n        disabled={props.isLast}\n      />\n      <IconButton\n        tooltip=\"Move up\"\n        onClick={() => props.onReorderOrderBy(REORDER_DIRECTION.UP)}\n        name=\"arrow-up\"\n        disabled={props.isFirst}\n      />\n      <IconButton tooltip=\"Delete Order By\" name=\"trash-alt\" onClick={props.onDelete} size=\"lg\" variant=\"destructive\" />\n    </HorizontalGroup>\n  );\n}\n","import React from 'react';\nimport { Box, IconButton, VerticalGroup } from '@grafana/ui';\nimport type { SelectableValue } from '@grafana/data';\nimport { differenceWith } from 'lodash';\n\nimport { QueryAdAttribute, SELECTABLE_QUERY_AD_ATTRIBUTES } from '../types/queryAdAttributes';\nimport { QueryAttribute, SELECTABLE_QUERY_ATTRIBUTES } from '../types/queryAttributes';\nimport type { QueryOrderBy, QuerySortOrder } from '../types/queryOrderBy';\nimport { OrderByInput } from './OrderByInput';\nimport { REORDER_DIRECTION } from './GroupByInput';\n\nconst getSelectableOrderByOptions = (\n  selectedOrderBys: QueryOrderBy[],\n  isAdAnalytics: boolean\n): Array<SelectableValue<QueryAdAttribute | QueryAttribute>> => {\n  if (isAdAnalytics) {\n    return differenceWith(\n      SELECTABLE_QUERY_AD_ATTRIBUTES,\n      selectedOrderBys,\n      (selectableValue, selectedValue) => selectableValue.value === selectedValue.name\n    );\n  } else {\n    return differenceWith(\n      SELECTABLE_QUERY_ATTRIBUTES,\n      selectedOrderBys,\n      (selectableValue, selectedValue) => selectableValue.value === selectedValue.name\n    );\n  }\n};\n\nconst mapOrderByAttributeToSelectableValue = (\n  selectedOrderBy: QueryAttribute | QueryAdAttribute,\n  isAdAnalytics: boolean\n): SelectableValue<QueryAttribute | QueryAdAttribute> => {\n  if (isAdAnalytics) {\n    return SELECTABLE_QUERY_AD_ATTRIBUTES.filter((selectableValue) => selectableValue.value === selectedOrderBy);\n  } else {\n    return SELECTABLE_QUERY_ATTRIBUTES.filter((selectableValue) => selectableValue.value === selectedOrderBy);\n  }\n};\n\ntype Props = {\n  readonly isAdAnalytics: boolean;\n  readonly onChange: (newOrderBy: QueryOrderBy[]) => void;\n  readonly orderBys: QueryOrderBy[];\n};\n\nexport function OrderByRow(props: Props) {\n  const deleteOrderByInput = (index: number) => {\n    const newOrderBys = [...props.orderBys];\n    newOrderBys.splice(index, 1);\n\n    props.onChange(newOrderBys);\n  };\n\n  const onAttributesChange = (index: number, newAttribute: SelectableValue<QueryAttribute | QueryAdAttribute>) => {\n    const newOrderBys = [...props.orderBys];\n    const newOrderBy: QueryOrderBy = { name: newAttribute.value!, order: newOrderBys[index].order };\n\n    newOrderBys.splice(index, 1, newOrderBy);\n\n    props.onChange(newOrderBys);\n  };\n\n  const onSortOrdersChange = (index: number, newSortOrder: QuerySortOrder) => {\n    const newOrderBys = [...props.orderBys];\n    const newOrderBy: QueryOrderBy = { name: newOrderBys[index].name, order: newSortOrder };\n\n    newOrderBys.splice(index, 1, newOrderBy);\n\n    props.onChange(newOrderBys);\n  };\n  const reorderOrderBy = (direction: REORDER_DIRECTION, index: number) => {\n    const newIndex = direction === REORDER_DIRECTION.UP ? index - 1 : index + 1;\n\n    const newOrderBys = [...props.orderBys];\n    const orderByToMove = newOrderBys[index];\n    newOrderBys.splice(index, 1);\n    newOrderBys.splice(newIndex, 0, orderByToMove);\n\n    props.onChange(newOrderBys);\n  };\n\n  const addOrderByInput = () => {\n    const newDefaultSelectedValue = getSelectableOrderByOptions(props.orderBys, props.isAdAnalytics)[0].value!;\n    props.onChange([...props.orderBys, { name: newDefaultSelectedValue, order: 'ASC' }]);\n  };\n\n  return (\n    <VerticalGroup>\n      {props.orderBys.map((orderBy, index, selectedOrderBys) => (\n        <OrderByInput\n          key={index}\n          isAdAnalytics={props.isAdAnalytics}\n          selectableOrderByAttributes={getSelectableOrderByOptions(selectedOrderBys, props.isAdAnalytics)}\n          attribute={mapOrderByAttributeToSelectableValue(orderBy.name, props.isAdAnalytics)}\n          onAttributeChange={(newValue: SelectableValue<QueryAdAttribute | QueryAttribute>) =>\n            onAttributesChange(index, newValue)\n          }\n          sortOrder={orderBy.order}\n          onSortOrderChange={(newValue: QuerySortOrder) => onSortOrdersChange(index, newValue)}\n          onDelete={() => deleteOrderByInput(index)}\n          isFirst={index === 0}\n          isLast={index === selectedOrderBys.length - 1}\n          onReorderOrderBy={(direction: REORDER_DIRECTION) => reorderOrderBy(direction, index)}\n        />\n      ))}\n\n      <Box paddingTop={props.orderBys.length === 0 ? 0.5 : 0}>\n        <IconButton name=\"plus-square\" tooltip=\"Add Order By\" onClick={() => addOrderByInput()} size=\"xl\" />\n      </Box>\n    </VerticalGroup>\n  );\n}\n","import { QueryAdAttribute } from './queryAdAttributes';\nimport { QueryAttribute } from './queryAttributes';\nimport type { SelectableValue } from '@grafana/data';\n\nconst QUERY_FILTER_OPERATORS = ['GT', 'GTE', 'LT', 'LTE', 'EQ', 'NE', 'CONTAINS', 'NOTCONTAINS', 'IN'] as const;\n\nexport type QueryFilterOperator = (typeof QUERY_FILTER_OPERATORS)[number];\n\nexport const SELECTABLE_QUERY_FILTER_OPERATORS: Array<SelectableValue<QueryFilterOperator>> =\n  QUERY_FILTER_OPERATORS.map((o) => ({ value: o, label: o }));\n\n/** This type is needed because of legacy reasons.\n * In the angular plugin the value was saved as a string in a dashboard JSON file. */\nexport type QueryFilter = {\n  name: QueryAdAttribute | QueryAttribute;\n  operator: QueryFilterOperator;\n  value: string;\n};\n\n/** QueryFilter type with the correct value type that is accepted by the Bitmovin API */\nexport type ProperTypedQueryFilter = {\n  name: QueryAdAttribute | QueryAttribute;\n  operator: QueryFilterOperator;\n  value: OutputQueryFilterValue;\n};\n\n/** Correct Filter value type that is accepted by the Bitmovin API */\nexport type OutputQueryFilterValue = boolean | number | string | string[] | null;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { HorizontalGroup, IconButton, Input, Select, Tooltip } from '@grafana/ui';\n\nimport { QueryFilter, QueryFilterOperator, SELECTABLE_QUERY_FILTER_OPERATORS } from '../types/queryFilter';\nimport type { SelectableValue } from '@grafana/data';\nimport { QueryAttribute, SELECTABLE_QUERY_ATTRIBUTES } from '../types/queryAttributes';\nimport { QueryAdAttribute, SELECTABLE_QUERY_AD_ATTRIBUTES } from '../types/queryAdAttributes';\nimport { convertFilterValueToProperType } from 'utils/filterUtils';\n\ninterface QueryFilterInputProps {\n  /** `undefined` when component is used to create new filter (no values yet) */\n  value: undefined | QueryFilter;\n  onChange(queryFilter: QueryFilter): void;\n  onDelete(): void;\n  isAdAnalytics: boolean;\n  /** Selected query filters are used to filter out used values from attribute select options */\n  selectedQueryFilters: QueryFilter[];\n}\n\nexport function QueryFilterInput(props: Readonly<QueryFilterInputProps>) {\n  /** Flag to indicate that query filter is undefined, does not exist yet, and this component is used to create new one */\n  const isCreatingNewOne = props.value == null;\n\n  const [derivedQueryFilterState, setDerivedQueryFilterState] = useState(\n    buildInitialDerivedQueryFilterState(props.value)\n  );\n\n  /** Update and override {@link derivedQueryFilterState}, when {@link QueryFilterInputProps} value is changed */\n  useEffect(() => setDerivedQueryFilterState(buildInitialDerivedQueryFilterState(props.value)), [props.value]);\n\n  const attributeSelectValue = useMemo(\n    () => findAttributeSelectableValue(derivedQueryFilterState.attribute, props.isAdAnalytics),\n    [derivedQueryFilterState.attribute, props.isAdAnalytics]\n  );\n\n  const operatorSelectValue = useMemo(\n    () => findOperatorSelectableValue(derivedQueryFilterState.operator),\n    [derivedQueryFilterState.operator]\n  );\n\n  function handleAttributeChange(selectedValue: SelectableValue<QueryAttribute | QueryAdAttribute>) {\n    setDerivedQueryFilterState((prevState) => ({\n      ...prevState,\n      dirty: true,\n      attribute: selectedValue.value,\n      attributeError: undefined,\n    }));\n  }\n\n  function handleOperatorChange(selectedValue: SelectableValue<QueryFilterOperator>) {\n    setDerivedQueryFilterState((prevState) => ({\n      ...prevState,\n      dirty: true,\n      operator: selectedValue.value,\n      operatorError: undefined,\n    }));\n  }\n\n  function handleInputValueChange(value: string) {\n    setDerivedQueryFilterState((prevState) => ({\n      ...prevState,\n      dirty: true,\n      value: value,\n      inputValueError: undefined,\n    }));\n  }\n\n  function handleRevertClick() {\n    setDerivedQueryFilterState(buildInitialDerivedQueryFilterState(props.value));\n  }\n\n  function handleSaveClick() {\n    if (derivedQueryFilterState.attribute == null) {\n      setDerivedQueryFilterState((prevState) => ({\n        ...prevState,\n        attributeError: 'Filter attribute has to be selected',\n      }));\n      return;\n    }\n\n    if (derivedQueryFilterState.operator == null) {\n      setDerivedQueryFilterState((prevState) => ({\n        ...prevState,\n        operatorError: 'Filter operator has to be selected',\n      }));\n      return;\n    }\n\n    try {\n      convertFilterValueToProperType(\n        derivedQueryFilterState.value!,\n        derivedQueryFilterState.attribute!,\n        derivedQueryFilterState.operator!,\n        props.isAdAnalytics\n      );\n\n      props.onChange({\n        name: derivedQueryFilterState.attribute!,\n        operator: derivedQueryFilterState.operator!,\n        value: derivedQueryFilterState.value!,\n      });\n    } catch (e: unknown) {\n      setDerivedQueryFilterState((prevState) => ({\n        ...prevState,\n        inputValueError: e instanceof Error ? e.message : 'Could not save value',\n      }));\n    }\n  }\n\n  return (\n    <HorizontalGroup spacing=\"xs\">\n      <Tooltip\n        content={derivedQueryFilterState.attributeError ?? ''}\n        show={derivedQueryFilterState.attributeError != null}\n        theme=\"error\"\n      >\n        {/* this div wrapper is needed to expose `ref` for Tooltip above */}\n        <div>\n          <Select\n            value={attributeSelectValue}\n            onChange={handleAttributeChange}\n            options={props.isAdAnalytics ? SELECTABLE_QUERY_AD_ATTRIBUTES : SELECTABLE_QUERY_ATTRIBUTES}\n            width={ATTRIBUTE_COMPONENT_WIDTH}\n            invalid={derivedQueryFilterState.attributeError != null}\n          />\n        </div>\n      </Tooltip>\n      <Tooltip\n        content={derivedQueryFilterState.operatorError ?? ''}\n        show={derivedQueryFilterState.operatorError != null}\n        theme=\"error\"\n      >\n        {/* this div wrapper is needed to expose `ref` for Tooltip above */}\n        <div>\n          <Select\n            value={operatorSelectValue}\n            onChange={handleOperatorChange}\n            options={SELECTABLE_QUERY_FILTER_OPERATORS}\n            width={OPERATOR_COMPONENT_WIDTH}\n            invalid={derivedQueryFilterState.operatorError != null}\n          />\n        </div>\n      </Tooltip>\n      <Tooltip\n        content={derivedQueryFilterState.inputValueError ?? ''}\n        show={derivedQueryFilterState.inputValueError != null}\n        theme=\"error\"\n      >\n        <Input\n          value={derivedQueryFilterState.value}\n          onChange={(e) => handleInputValueChange(e.currentTarget.value)}\n          invalid={derivedQueryFilterState.inputValueError != null}\n          type=\"text\"\n          width={VALUE_COMPONENT_WIDTH}\n        />\n      </Tooltip>\n\n      <IconButton variant=\"destructive\" name=\"trash-alt\" size=\"lg\" tooltip=\"Delete Filter\" onClick={props.onDelete} />\n      {/* in \"create mode\" we want to show save icons all the time */}\n      {(isCreatingNewOne || derivedQueryFilterState.dirty) && (\n        <IconButton\n          variant=\"primary\"\n          name={isCreatingNewOne ? 'plus-square' : 'save'}\n          size=\"lg\"\n          tooltip={isCreatingNewOne ? 'Add new filter' : 'Save changes'}\n          onClick={handleSaveClick}\n        />\n      )}\n      {/* in \"create mode\" there is nothing to revert to */}\n      {!isCreatingNewOne && derivedQueryFilterState.dirty && (\n        <IconButton variant=\"secondary\" name=\"history\" size=\"lg\" tooltip=\"Revert changes\" onClick={handleRevertClick} />\n      )}\n    </HorizontalGroup>\n  );\n}\n\nexport const ATTRIBUTE_COMPONENT_WIDTH = 30;\nexport const OPERATOR_COMPONENT_WIDTH = 15;\nexport const VALUE_COMPONENT_WIDTH = 30;\n\ntype DerivedQueryFilterState = {\n  attribute: undefined | QueryFilter['name'];\n  attributeError: undefined | string;\n  operator: undefined | QueryFilter['operator'];\n  operatorError: undefined | string;\n  value: undefined | QueryFilter['value'];\n  /** `true` if some values have been changed by inputs */\n  dirty: boolean;\n  /** `undefined` when input value is valid */\n  inputValueError: undefined | string;\n};\n\nfunction buildInitialDerivedQueryFilterState(queryFilter: undefined | QueryFilter): DerivedQueryFilterState {\n  return {\n    attribute: queryFilter?.name,\n    attributeError: undefined,\n    operator: queryFilter?.operator,\n    operatorError: undefined,\n    value: queryFilter?.value,\n    dirty: false,\n    inputValueError: undefined,\n  };\n}\n\nfunction findAttributeSelectableValue(\n  attribute: undefined | QueryAttribute | QueryAdAttribute,\n  isAdAnalytics: boolean\n): undefined | SelectableValue<QueryAttribute | QueryAdAttribute> {\n  if (attribute == null) {\n    return undefined;\n  }\n\n  const ALL_ATTRIBUTES: Array<SelectableValue<QueryAttribute | QueryAdAttribute>> = isAdAnalytics\n    ? SELECTABLE_QUERY_AD_ATTRIBUTES\n    : SELECTABLE_QUERY_ATTRIBUTES;\n\n  return ALL_ATTRIBUTES.find((s) => s.value === attribute);\n}\n\nfunction findOperatorSelectableValue(\n  operator: undefined | QueryFilterOperator\n): undefined | SelectableValue<QueryFilterOperator> {\n  if (operator == null) {\n    return undefined;\n  }\n\n  return SELECTABLE_QUERY_FILTER_OPERATORS.find((s) => s.value === operator);\n}\n","import React, { useState } from 'react';\nimport { Box, HorizontalGroup, IconButton, InlineLabel, VerticalGroup } from '@grafana/ui';\n\nimport { QueryFilter } from '../types/queryFilter';\nimport {\n  ATTRIBUTE_COMPONENT_WIDTH,\n  OPERATOR_COMPONENT_WIDTH,\n  QueryFilterInput,\n  VALUE_COMPONENT_WIDTH,\n} from './QueryFilterInput';\n\ntype Props = {\n  readonly isAdAnalytics: boolean;\n  readonly onQueryFilterChange: (newFilters: QueryFilter[]) => void;\n  readonly filters: QueryFilter[];\n};\n\nexport function FilterRow(props: Props) {\n  const [hasNewQueryFilter, setHasNewQueryFilter] = useState<boolean>(false);\n\n  function handleQueryFilterDelete(queryFilterIndex: number) {\n    const newQueryFilters = [...props.filters];\n    newQueryFilters.splice(queryFilterIndex, 1);\n    props.onQueryFilterChange(newQueryFilters);\n  }\n\n  function handleQueryFilterChange(queryFilterIndex: number, changedQueryFilter: QueryFilter) {\n    const newQueryFilters = [...props.filters];\n    newQueryFilters.splice(queryFilterIndex, 1, changedQueryFilter);\n    props.onQueryFilterChange(newQueryFilters);\n  }\n\n  function handleNewQueryFilterChange(newQueryFilter: QueryFilter) {\n    const newQueryFilters = [...props.filters, newQueryFilter];\n    props.onQueryFilterChange(newQueryFilters);\n    setHasNewQueryFilter(false);\n  }\n\n  return (\n    <VerticalGroup>\n      {(props.filters.length > 0 || hasNewQueryFilter) && (\n        <HorizontalGroup spacing={'none'}>\n          <InlineLabel width={ATTRIBUTE_COMPONENT_WIDTH} tooltip=\"\">\n            Attribute\n          </InlineLabel>\n          <InlineLabel width={OPERATOR_COMPONENT_WIDTH} tooltip=\"\">\n            Operator\n          </InlineLabel>\n          <InlineLabel width={VALUE_COMPONENT_WIDTH} tooltip=\"\">\n            Value\n          </InlineLabel>\n        </HorizontalGroup>\n      )}\n\n      {props.filters.map((queryFilter, queryFilterIdx) => (\n        <QueryFilterInput\n          isAdAnalytics={props.isAdAnalytics}\n          value={queryFilter}\n          onChange={(changedQueryFilter) => handleQueryFilterChange(queryFilterIdx, changedQueryFilter)}\n          onDelete={() => handleQueryFilterDelete(queryFilterIdx)}\n          selectedQueryFilters={props.filters}\n          key={queryFilterIdx}\n        />\n      ))}\n\n      <Box paddingTop={props.filters.length === 0 ? 0.5 : 0}>\n        {hasNewQueryFilter ? (\n          <QueryFilterInput\n            isAdAnalytics={props.isAdAnalytics}\n            value={undefined}\n            onChange={handleNewQueryFilterChange}\n            onDelete={() => setHasNewQueryFilter(false)}\n            selectedQueryFilters={props.filters}\n          />\n        ) : (\n          <IconButton name=\"plus-square\" tooltip=\"Add Filter\" onClick={() => setHasNewQueryFilter(true)} size=\"xl\" />\n        )}\n      </Box>\n    </VerticalGroup>\n  );\n}\n","import React, { ChangeEvent, useEffect, useMemo, useState } from 'react';\nimport { FieldSet, HorizontalGroup, InlineField, InlineSwitch, Input, Select } from '@grafana/ui';\nimport type { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { defaults } from 'lodash';\n\nimport { DataSource } from '../datasource';\nimport {\n  BitmovinDataSourceOptions,\n  BitmovinAnalyticsDataQuery,\n  DEFAULT_QUERY,\n  OldBitmovinAnalyticsDataQuery,\n} from '../types/grafanaTypes';\nimport { fetchLicenses } from '../utils/licenses';\nimport { DEFAULT_SELECTABLE_QUERY_INTERVAL, SELECTABLE_QUERY_INTERVALS } from '../utils/intervalUtils';\nimport { SELECTABLE_AGGREGATION_METHODS } from '../types/aggregationMethod';\nimport { QueryAdAttribute, SELECTABLE_QUERY_AD_ATTRIBUTES } from '../types/queryAdAttributes';\nimport { QueryAttribute, SELECTABLE_QUERY_ATTRIBUTES } from '../types/queryAttributes';\nimport { isMetric, SELECTABLE_METRICS } from '../types/metric';\nimport { GroupByRow } from './GroupByRow';\nimport { OrderByRow } from './OrderByRow';\nimport type { QueryOrderBy } from '../types/queryOrderBy';\nimport type { QueryFilter } from '../types/queryFilter';\nimport { FilterRow } from './FilterRow';\n\nenum LoadingState {\n  Default = 'DEFAULT',\n  Loading = 'LOADING',\n  Success = 'SUCCESS',\n  Error = 'ERROR',\n}\n\ntype Props = QueryEditorProps<\n  DataSource,\n  BitmovinAnalyticsDataQuery | OldBitmovinAnalyticsDataQuery,\n  BitmovinDataSourceOptions\n>;\n\nexport function QueryEditor(props: Props) {\n  const query = defaults(props.query, DEFAULT_QUERY);\n  const [selectableLicenses, setSelectableLicenses] = useState<SelectableValue[]>([]);\n  const [licenseLoadingState, setLicenseLoadingState] = useState<LoadingState>(LoadingState.Default);\n  const [licenseErrorMessage, setLicenseErrorMessage] = useState('');\n  const [isTimeSeries, setIsTimeSeries] = useState(query.resultFormat === 'time_series');\n  const [percentileValue, setPercentileValue] = useState(query.percentileValue);\n  const isMetricSelected = useMemo(() => {\n    return query.dimension ? isMetric(query.dimension) : false;\n  }, [query.dimension]);\n  const isPercentileSelected = useMemo(() => {\n    return query.metric === 'percentile';\n  }, [query.metric]);\n\n  /** Fetch Licenses */\n  useEffect(() => {\n    setLicenseLoadingState(LoadingState.Loading);\n    fetchLicenses(props.datasource.apiKey, props.datasource.baseUrl, props.datasource.tenantOrgId)\n      .then((licenses) => {\n        setSelectableLicenses(licenses);\n        setLicenseLoadingState(LoadingState.Success);\n      })\n      .catch((e) => {\n        setLicenseLoadingState(LoadingState.Error);\n        setLicenseErrorMessage(e.status + ' ' + e.statusText);\n      });\n  }, [props.datasource.apiKey, props.datasource.baseUrl, props.datasource.tenantOrgId]);\n\n  const handleLicenseChange = (item: SelectableValue) => {\n    props.onChange({ ...query, license: item.value });\n    props.onRunQuery();\n  };\n\n  const handleAggregationChange = (item: SelectableValue) => {\n    props.onChange({ ...query, metric: item.value });\n    props.onRunQuery();\n  };\n\n  const handleDimensionChange = (item: SelectableValue) => {\n    props.onChange({ ...query, dimension: item.value });\n    props.onRunQuery();\n  };\n\n  const handleGroupByChange = (newGroupBys: Array<QueryAttribute | QueryAdAttribute>) => {\n    props.onChange({ ...query, groupBy: newGroupBys });\n    props.onRunQuery();\n  };\n\n  const handleOrderByChange = (newOrderBys: QueryOrderBy[]) => {\n    props.onChange({ ...query, orderBy: newOrderBys });\n    props.onRunQuery();\n  };\n\n  const handleQueryFilterChange = (newFilters: QueryFilter[]) => {\n    props.onChange({ ...query, filter: newFilters });\n    props.onRunQuery();\n  };\n\n  const handleLimitBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const limit = parseInt(event.target.value, 10);\n    props.onChange({ ...query, limit: isNaN(limit) ? undefined : limit });\n    props.onRunQuery();\n  };\n\n  const handleFormatAsTimeSeriesChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setIsTimeSeries(event.currentTarget.checked);\n    if (event.currentTarget.checked) {\n      props.onChange({ ...query, interval: 'AUTO', resultFormat: 'time_series' });\n    } else {\n      props.onChange({ ...query, interval: undefined, resultFormat: 'table' });\n    }\n    props.onRunQuery();\n  };\n\n  const handleIntervalChange = (item: SelectableValue) => {\n    props.onChange({ ...query, interval: item.value });\n    props.onRunQuery();\n  };\n\n  const handleAliasByBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    props.onChange({ ...query, alias: event.target.value });\n    props.onRunQuery();\n  };\n\n  const handlePercentileValueChange = (event: ChangeEvent<HTMLInputElement>) => {\n    let percentile = parseInt(event.target.value, 10);\n    if (percentile < 0) {\n      percentile = 0;\n    } else if (percentile > 99) {\n      percentile = 99;\n    }\n    setPercentileValue(percentile);\n  };\n\n  const handlePercentileBlur = () => {\n    props.onChange({ ...query, percentileValue: percentileValue });\n    props.onRunQuery();\n  };\n\n  const renderTimeSeriesOption = () => {\n    return (\n      <>\n        <InlineField label=\"Interval\" labelWidth={20}>\n          <Select\n            defaultValue={DEFAULT_SELECTABLE_QUERY_INTERVAL}\n            onChange={(item) => handleIntervalChange(item)}\n            width={30}\n            options={SELECTABLE_QUERY_INTERVALS}\n          />\n        </InlineField>\n      </>\n    );\n  };\n\n  return (\n    <div className=\"gf-form\">\n      <FieldSet>\n        <InlineField\n          label=\"License\"\n          labelWidth={20}\n          invalid={licenseLoadingState === LoadingState.Error}\n          error={`Error when fetching Analytics Licenses: ${licenseErrorMessage}`}\n          disabled={licenseLoadingState === LoadingState.Error}\n          required\n        >\n          <Select\n            value={query.license}\n            onChange={handleLicenseChange}\n            width={30}\n            options={selectableLicenses}\n            noOptionsMessage=\"No Analytics Licenses found\"\n            isLoading={licenseLoadingState === LoadingState.Loading}\n            placeholder={licenseLoadingState === LoadingState.Loading ? 'Loading Licenses' : 'Choose License'}\n          />\n        </InlineField>\n        <HorizontalGroup spacing=\"xs\">\n          {!isMetricSelected && (\n            <InlineField label=\"Metric\" labelWidth={20} required>\n              <Select\n                value={query.metric}\n                onChange={(item) => handleAggregationChange(item)}\n                width={30}\n                options={SELECTABLE_AGGREGATION_METHODS}\n              />\n            </InlineField>\n          )}\n          {isPercentileSelected && (\n            <Input\n              value={percentileValue}\n              onChange={handlePercentileValueChange}\n              onBlur={handlePercentileBlur}\n              type=\"number\"\n              placeholder=\"value\"\n              width={10}\n            />\n          )}\n        </HorizontalGroup>\n        <InlineField label=\"Dimension\" labelWidth={20} required>\n          <Select\n            value={query.dimension}\n            onChange={handleDimensionChange}\n            width={30}\n            options={\n              props.datasource.adAnalytics\n                ? SELECTABLE_QUERY_AD_ATTRIBUTES\n                : SELECTABLE_QUERY_ATTRIBUTES.concat(SELECTABLE_METRICS)\n            }\n          />\n        </InlineField>\n        <InlineField label=\"Filter\" labelWidth={20}>\n          <FilterRow\n            isAdAnalytics={props.datasource.adAnalytics ? true : false}\n            onQueryFilterChange={handleQueryFilterChange}\n            filters={query.filter}\n          />\n        </InlineField>\n        <InlineField label=\"Group By\" labelWidth={20}>\n          <GroupByRow\n            isAdAnalytics={props.datasource.adAnalytics ? true : false}\n            onChange={handleGroupByChange}\n            groupBys={query.groupBy}\n          />\n        </InlineField>\n        <InlineField label=\"Order By\" labelWidth={20}>\n          <OrderByRow\n            isAdAnalytics={props.datasource.adAnalytics ? true : false}\n            onChange={handleOrderByChange}\n            orderBys={query.orderBy}\n          />\n        </InlineField>\n        <InlineField label=\"Limit\" labelWidth={20}>\n          <Input defaultValue={query.limit} type=\"number\" onBlur={handleLimitBlur} width={30} placeholder=\"No limit\" />\n        </InlineField>\n        <InlineField label=\"Format as time series\" labelWidth={20}>\n          <InlineSwitch value={isTimeSeries} onChange={handleFormatAsTimeSeriesChange}></InlineSwitch>\n        </InlineField>\n        {isTimeSeries && renderTimeSeriesOption()}\n        <InlineField label=\"Alias By\" labelWidth={20}>\n          <Input defaultValue={query.alias} placeholder=\"Naming pattern\" onBlur={handleAliasByBlur} />\n        </InlineField>\n      </FieldSet>\n    </div>\n  );\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport {\n  BitmovinAnalyticsDataQuery,\n  BitmovinDataSourceOptions,\n  OldBitmovinAnalyticsDataQuery,\n} from './types/grafanaTypes';\n\nexport const plugin = new DataSourcePlugin<\n  DataSource,\n  BitmovinAnalyticsDataQuery | OldBitmovinAnalyticsDataQuery,\n  BitmovinDataSourceOptions\n>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, { ChangeEvent, useEffect } from 'react';\nimport { DataSourceHttpSettings, FieldSet, InlineField, InlineSwitch, Input } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { BitmovinDataSourceOptions } from '../types/grafanaTypes';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<BitmovinDataSourceOptions> {}\n\nexport function ConfigEditor(props: Props) {\n  const { onOptionsChange, options } = props;\n\n  // sets the instanceSettings.url to the default bitmovin api url if it is not already set when opening the ConfigEditor\n  useEffect(() => {\n    if (options.url === '' || options.url == null) {\n      onOptionsChange({ ...options, url: 'https://api.bitmovin.com/v1' });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onAdAnalyticsChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const jsonData = {\n      ...options.jsonData,\n      adAnalytics: event.currentTarget.checked,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  const onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const jsonData = {\n      ...options.jsonData,\n      apiKey: event.currentTarget.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  const onTenantOrgIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const jsonData = {\n      ...options.jsonData,\n      tenantOrgId: event.currentTarget.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  const { jsonData } = options;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"https://api.bitmovin.com/v1\"\n        dataSourceConfig={options}\n        onChange={onOptionsChange}\n        showAccessOptions={true}\n      />\n\n      <FieldSet label=\"Bitmovin Analytics Details\">\n        <InlineField required label=\"API Key\" labelWidth={26}>\n          <Input\n            required\n            onChange={onAPIKeyChange}\n            value={jsonData.apiKey || ''}\n            placeholder=\"Analytics API Key\"\n            width={40}\n          />\n        </InlineField>\n        <InlineField label=\"Tenant Org Id\" labelWidth={26}>\n          <Input\n            onChange={onTenantOrgIdChange}\n            value={jsonData.tenantOrgId || ''}\n            placeholder=\"Tenant Org Id\"\n            width={40}\n          />\n        </InlineField>\n        <InlineField label=\"Ad Analytics\" tooltip={'Check if you want to query ads data'} labelWidth={26}>\n          <InlineSwitch value={jsonData.adAnalytics || false} onChange={onAdAnalyticsChange}></InlineSwitch>\n        </InlineField>\n      </FieldSet>\n    </>\n  );\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__241__","__WEBPACK_EXTERNAL_MODULE__959__","__WEBPACK_EXTERNAL_MODULE__269__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","DEFAULT_QUERY","license","orderBy","groupBy","filter","resultFormat","interval","SELECTABLE_QUERY_INTERVALS","label","DEFAULT_SELECTABLE_QUERY_INTERVAL","padAndSortTimeSeries","data","startTimestamp","endTimestamp","length","intervalInMs","intervalToMilliseconds","Error","ceiledTimestamp","dataTimestamp","startDate","Date","getSeconds","getMilliseconds","setMinutes","getMinutes","setHours","getHours","dataHours","dataMinutes","startDateWithCorrectTime","getFullYear","getMonth","getDate","getTime","setDate","ceilTimestampAccordingToQueryInterval","dataRows","zeroValueTimeSeries","slice","timestamp","row","push","missingTimestampRows","differenceWith","first","second","paddedData","concat","sortedData","sortBy","index","METRICS","SELECTABLE_METRICS","map","metric","isMetric","includes","convertFilterValueToProperType","rawValue","filterAttribute","filterOperator","isAdAnalytics","isEmpty","isNullFilter","JSON","parse","Array","isArray","parseValueForInFilter","e","parsedValue","parseInt","isNaN","parseFloat","convertFilterForAds","convertFilter","DataSource","DataSourceApi","getDefaultQuery","_","options","range","from","toDate","to","promises","targets","t","hide","target","query","intervalInMilliseconds","calculateQueryInterval","aggregationMethod","percentileValue","dimension","filters","name","operator","adAnalytics","start","end","licenseKey","limit","parseLimit","percentile","response","lastValueFrom","request","getRequestUrl","result","rows","dataRowCount","rowCount","columnLabels","fields","groupedTimeSeriesMap","Map","forEach","groupKey","toString","has","set","paddedTimeSeries","timestamps","zip","values","type","FieldType","time","join","valueColumn","number","transformGroupedTimeSeriesData","columnName","columns","transformSimpleTimeSeries","columnNames","i","column","string","transformTableData","metaNotices","severity","text","createDataFrame","alias","meta","notices","Promise","all","then","Number","isInteger","aggregation","url","this","method","payload","headers","apiKey","tenantOrgId","baseUrl","getBackendSrv","fetch","testDatasource","pipe","status","message","catchError","err","statusText","errorDetails","errorMessage","requestId","toISOString","of","details","verboseMessage","constructor","instanceSettings","super","jsonData","licenseEndpoints","endpoint","mapperFunc","id","fetchLicensesForEndpoint","licenses","items","selectableLicenses","fetchLicenses","allLicenses","licenseEndpoint","SELECTABLE_AGGREGATION_METHODS","SELECTABLE_QUERY_AD_ATTRIBUTES","queryAdAttribute","SELECTABLE_QUERY_ATTRIBUTES","queryAttribute","GroupByInput","props","HorizontalGroup","Select","onChange","selectableValue","selectableGroupBys","width","IconButton","tooltip","onClick","onReorderGroupBy","disabled","isLast","isFirst","onDelete","size","variant","REORDER_DIRECTION","getSelectableGroupByOptions","selectedGroupBys","selectedValue","GroupByRow","VerticalGroup","groupBys","item","selectedGroupBysArray","selectedGroupBy","newValue","newSelectedGroupBy","newSelectedGroupBys","splice","onSelectedGroupByChange","deleteGroupByInput","direction","groupByToMove","newIndex","UP","reorderGroupBy","Box","paddingTop","newDefaultSelectedValue","addGroupByInput","sortOrderOption","description","icon","OrderByInput","spacing","attribute","onAttributeChange","selectableOrderByAttributes","RadioButtonGroup","sortOrder","onSortOrderChange","onReorderOrderBy","DOWN","getSelectableOrderByOptions","selectedOrderBys","OrderByRow","orderBys","selectedOrderBy","newAttribute","newOrderBys","newOrderBy","order","onAttributesChange","newSortOrder","onSortOrdersChange","deleteOrderByInput","orderByToMove","reorderOrderBy","addOrderByInput","SELECTABLE_QUERY_FILTER_OPERATORS","QueryFilterInput","isCreatingNewOne","derivedQueryFilterState","setDerivedQueryFilterState","useState","buildInitialDerivedQueryFilterState","useEffect","attributeSelectValue","useMemo","find","s","findAttributeSelectableValue","operatorSelectValue","findOperatorSelectableValue","Tooltip","content","attributeError","show","theme","div","prevState","dirty","ATTRIBUTE_COMPONENT_WIDTH","invalid","operatorError","OPERATOR_COMPONENT_WIDTH","inputValueError","Input","handleInputValueChange","currentTarget","VALUE_COMPONENT_WIDTH","queryFilter","FilterRow","hasNewQueryFilter","setHasNewQueryFilter","InlineLabel","queryFilterIdx","changedQueryFilter","queryFilterIndex","newQueryFilters","onQueryFilterChange","handleQueryFilterChange","handleQueryFilterDelete","selectedQueryFilters","newQueryFilter","LoadingState","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","FieldSet","InlineField","required","labelWidth","event","placeholder","InlineSwitch","checked","setQueryEditor","defaults","setSelectableLicenses","licenseLoadingState","setLicenseLoadingState","licenseErrorMessage","setLicenseErrorMessage","isTimeSeries","setIsTimeSeries","setPercentileValue","isMetricSelected","isPercentileSelected","datasource","catch","className","error","onRunQuery","noOptionsMessage","isLoading","handleAggregationChange","onBlur","newFilters","newGroupBys","defaultValue","handleIntervalChange"],"sourceRoot":""}