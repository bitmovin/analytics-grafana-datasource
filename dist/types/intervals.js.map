{"version":3,"sources":["../../src/types/intervals.js"],"names":["QUERY_INTERVAL","SECOND","MINUTE","HOUR","DAY","MONTH","AUTO","QUERY_INTERVAL_LIST","Object","keys","map","key","calculateAutoInterval","intervalMs","calculateAutoIntervalFromRange","from","to","dataPointIntervalMs","intervalToMilliseconds","interval"],"mappings":";;;;;;;;;gCAAaA,c,GAAiB;AAC5BC,QAAAA,MAAM,EAAE,QADoB;AAE5BC,QAAAA,MAAM,EAAE,QAFoB;AAG5BC,QAAAA,IAAI,EAAE,MAHsB;AAI5BC,QAAAA,GAAG,EAAE,KAJuB;AAK5BC,QAAAA,KAAK,EAAE,OALqB;AAM5BC,QAAAA,IAAI,EAAE;AANsB,O;;qCAQjBC,mB,GAAsBC,MAAM,CAACC,IAAP,CAAYT,cAAZ,EAA4BU,GAA5B,CAAgC,UAAAC,GAAG;AAAA,eAAIX,cAAc,CAACW,GAAD,CAAlB;AAAA,OAAnC,C;;uCAEtBC,qB,GAAwB,SAAxBA,qBAAwB,CAACC,UAAD,EAAgB;AACnD,YAAIA,UAAU,IAAI,IAAlB,EAAwB;AACtB,iBAAOb,cAAc,CAACC,MAAtB;AACD,SAFD,MAEO,IAAIY,UAAU,GAAG,KAAjB,EAAwB;AAC7B,iBAAOb,cAAc,CAACE,MAAtB;AACD,SAFM,MAEA,IAAIW,UAAU,IAAI,KAAd,IAAuBA,UAAU,GAAG,MAAxC,EAAgD;AACrD,iBAAOb,cAAc,CAACG,IAAtB;AACD,SAFM,MAEA,IAAIU,UAAU,IAAI,MAAd,IAAwBA,UAAU,GAAG,OAAzC,EAAkD;AACvD,iBAAOb,cAAc,CAACI,GAAtB;AACD,SAFM,MAEA;AACL,iBAAOJ,cAAc,CAACK,KAAtB;AACD;AACF,O;;gDAEYS,8B,GAAiC,SAAjCA,8BAAiC,CAACC,IAAD,EAAOC,EAAP,EAAc;AAC1D,YAAIC,mBAAmB,GAAG,CAACD,EAAE,GAAGD,IAAN,IAAY,GAAtC;;AACA,YAAIE,mBAAmB,IAAI,IAA3B,EAAiC;AAC/B,iBAAOjB,cAAc,CAACC,MAAtB;AACD,SAFD,MAEO,IAAIgB,mBAAmB,GAAG,IAAtB,IAA8BA,mBAAmB,IAAI,KAAzD,EAAgE;AACrE,iBAAOjB,cAAc,CAACE,MAAtB;AACD,SAFM,MAEA,IAAIe,mBAAmB,GAAG,KAAtB,IAA+BA,mBAAmB,IAAI,OAA1D,EAAmE;AACxE,iBAAOjB,cAAc,CAACG,IAAtB;AACD,SAFM,MAEA,IAAIc,mBAAmB,GAAG,OAAtB,IAAiCA,mBAAmB,IAAI,QAA5D,EAAsE;AAC3E,iBAAOjB,cAAc,CAACI,GAAtB;AACD,SAFM,MAEA;AACL,iBAAOJ,cAAc,CAACK,KAAtB;AACD;AACF,O;AAED;;;;;;;wCAKaa,sB,GAAyB,SAAzBA,sBAAyB,CAACC,QAAD,EAAc;AAClD,gBAAOA,QAAP;AACE,eAAKnB,cAAc,CAACC,MAApB;AACE,mBAAO,IAAP;;AACF,eAAKD,cAAc,CAACE,MAApB;AACE,mBAAO,OAAK,EAAZ;;AACF,eAAKF,cAAc,CAACG,IAApB;AACE,mBAAO,OAAK,EAAL,GAAQ,EAAf;;AACF,eAAKH,cAAc,CAACI,GAApB;AACE,mBAAO,OAAK,EAAL,GAAQ,EAAR,GAAW,EAAlB;;AACF,eAAKJ,cAAc,CAACK,KAApB;AACE,mBAAO,OAAK,EAAL,GAAQ,EAAR,GAAW,EAAX,GAAc,EAArB;;AACF;AACE,mBAAO,CAAC,CAAR;AAZJ;AAcD,O","sourcesContent":["export const QUERY_INTERVAL = {\n  SECOND: 'SECOND',\n  MINUTE: 'MINUTE',\n  HOUR: 'HOUR',\n  DAY: 'DAY',\n  MONTH: 'MONTH',\n  AUTO: 'AUTO'\n};\nexport const QUERY_INTERVAL_LIST = Object.keys(QUERY_INTERVAL).map(key => QUERY_INTERVAL[key]);\n\nexport const calculateAutoInterval = (intervalMs) => {\n  if (intervalMs <= 1000) {\n    return QUERY_INTERVAL.SECOND;\n  } else if (intervalMs < 60000) {\n    return QUERY_INTERVAL.MINUTE;\n  } else if (intervalMs >= 60000 && intervalMs < 604800) {\n    return QUERY_INTERVAL.HOUR;\n  } else if (intervalMs >= 604800 && intervalMs < 2592000) {\n    return QUERY_INTERVAL.DAY;\n  } else {\n    return QUERY_INTERVAL.MONTH;\n  }\n}\n\nexport const calculateAutoIntervalFromRange = (from, to) => {\n  let dataPointIntervalMs = (to - from)/200;\n  if (dataPointIntervalMs <= 1000) {\n    return QUERY_INTERVAL.SECOND;\n  } else if (dataPointIntervalMs > 1000 && dataPointIntervalMs <= 60000) {\n    return QUERY_INTERVAL.MINUTE;\n  } else if (dataPointIntervalMs > 60000 && dataPointIntervalMs <= 3600000) {\n    return QUERY_INTERVAL.HOUR;\n  } else if (dataPointIntervalMs > 3600000 && dataPointIntervalMs <= 86400000) {\n    return QUERY_INTERVAL.DAY;\n  } else {\n    return QUERY_INTERVAL.MONTH;\n  }\n}\n\n/**\n * Get corresponding interval in milliseconds.\n * @param {String} interval The interval\n * @returns {number} Interval in milliseconds or -1 if unknown.\n */\nexport const intervalToMilliseconds = (interval) => {\n  switch(interval) {\n    case QUERY_INTERVAL.SECOND:\n      return 1000;\n    case QUERY_INTERVAL.MINUTE:\n      return 1000*60;\n    case QUERY_INTERVAL.HOUR:\n      return 1000*60*60;\n    case QUERY_INTERVAL.DAY:\n      return 1000*60*60*24;\n    case QUERY_INTERVAL.MONTH:\n      return 1000*60*60*24*30;\n    default:\n      return -1;\n  }\n};\n"],"file":"intervals.js"}