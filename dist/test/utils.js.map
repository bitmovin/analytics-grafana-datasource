{"version":3,"sources":["../../src/utils.js"],"names":["fillDataRow","series","timestamp","value","dataRow","find","i","push","padTimeSeriesAndSortByDate","fromDate","toDate","interval","padWith","intervalInMillis","length","timestampIndex","referenceDate"],"mappings":";;;;;;;AAAA;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAASC,SAAT,EAAoBC,KAApB,EAA8B;AAChD,MAAMC,OAAO,GAAGH,MAAM,CAACI,IAAP,CAAY,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAAC,CAAD,CAAD,KAASJ,SAAb;AAAA,GAAb,CAAhB;;AACA,MAAIE,OAAO,IAAI,IAAf,EAAqB;AACnBH,IAAAA,MAAM,CAACM,IAAP,CAAY,CAACL,SAAD,EAAYC,KAAZ,CAAZ;AACD;AACF,CALD;AAOA;;;;;;;;;;AAQO,IAAMK,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACP,MAAD,EAASQ,QAAT,EAAmBC,MAAnB,EAA2BC,QAA3B,EAAwD;AAAA,MAAnBC,OAAmB,uEAAT,IAAS;AAChG,MAAMC,gBAAgB,GAAG,uCAAuBF,QAAvB,CAAzB;;AACA,MAAIV,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACa,MAAP,KAAkB,CAApC,IAAyCD,gBAAgB,GAAG,CAAhE,EAAmE;AACjE,WAAOZ,MAAP;AACD;;AAED,MAAMc,cAAc,GAAG,CAAvB;AACA,MAAMC,aAAa,GAAGf,MAAM,CAAC,CAAD,CAAN,CAAUc,cAAV,CAAtB;;AACA,OAAK,IAAIb,SAAS,GAAGc,aAArB,EAAoCd,SAAS,GAAGQ,MAAhD,EAAwDR,SAAS,IAAIW,gBAArE,EAAuF;AACrFb,IAAAA,WAAW,CAACC,MAAD,EAASC,SAAT,EAAoBU,OAApB,CAAX;AACD;;AACD,OAAK,IAAIV,UAAS,GAAGc,aAAa,GAAGH,gBAArC,EAAuDX,UAAS,IAAIO,QAApE,EAA8EP,UAAS,IAAIW,gBAA3F,EAA6G;AAC3Gb,IAAAA,WAAW,CAACC,MAAD,EAASC,UAAT,EAAoBU,OAApB,CAAX;AACD;;AACD,SAAOX,MAAP;AACD,CAfM","sourcesContent":["import {intervalToMilliseconds} from './types/intervals';\n\nconst fillDataRow = (series, timestamp, value) => {\n  const dataRow = series.find(i => i[0] === timestamp);\n  if (dataRow == null) {\n    series.push([timestamp, value]);\n  }\n}\n\n/**\n * Add padding to the series where no data is available for given interval.\n * @param {Array<[timestamp: any, value: number]>} series Series that should be null-padded\n * @param {number} fromDate Start date of query as unix timestamp\n * @param {number} toDate End date of query as unix timestamp\n * @param {String} interval The interval used for the query, e.g. SECOND, MINUTE, HOUR, ...\n * @param {any} padWith The value that is used for padding, defaults to null\n */\nexport const padTimeSeriesAndSortByDate = (series, fromDate, toDate, interval, padWith = null) => {\n  const intervalInMillis = intervalToMilliseconds(interval);\n  if (series == null || series.length === 0 || intervalInMillis < 0) {\n    return series;\n  }\n\n  const timestampIndex = 0;\n  const referenceDate = series[0][timestampIndex];\n  for (let timestamp = referenceDate; timestamp < toDate; timestamp += intervalInMillis) {\n    fillDataRow(series, timestamp, padWith);\n  }\n  for (let timestamp = referenceDate - intervalInMillis; timestamp >= fromDate; timestamp -= intervalInMillis) {\n    fillDataRow(series, timestamp, padWith);\n  }\n  return series;\n}"],"file":"utils.js"}