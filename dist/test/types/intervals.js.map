{"version":3,"sources":["../../../src/types/intervals.js"],"names":["QUERY_INTERVAL","SECOND","MINUTE","HOUR","DAY","MONTH","AUTO","QUERY_INTERVAL_LIST","Object","keys","map","key","getMomentTimeUnitForQueryInterval","interval","calculateAutoInterval","intervalMs"],"mappings":";;;;;;AAAO,IAAMA,cAAc,GAAG;AAC5BC,EAAAA,MAAM,EAAE,QADoB;AAE5BC,EAAAA,MAAM,EAAE,QAFoB;AAG5BC,EAAAA,IAAI,EAAE,MAHsB;AAI5BC,EAAAA,GAAG,EAAE,KAJuB;AAK5BC,EAAAA,KAAK,EAAE,OALqB;AAM5BC,EAAAA,IAAI,EAAE;AANsB,CAAvB;;AAQA,IAAMC,mBAAmB,GAAGC,MAAM,CAACC,IAAP,CAAYT,cAAZ,EAA4BU,GAA5B,CAAgC,UAAAC,GAAG;AAAA,SAAIX,cAAc,CAACW,GAAD,CAAlB;AAAA,CAAnC,CAA5B;;;AAEA,IAAMC,iCAAiC,GAAG,SAApCA,iCAAoC,CAACC,QAAD,EAAc;AAC7D,UAAQA,QAAR;AACE,SAAKb,cAAc,CAACC,MAApB;AACE,aAAO,QAAP;;AACF,SAAKD,cAAc,CAACE,MAApB;AACE,aAAO,QAAP;;AACF,SAAKF,cAAc,CAACG,IAApB;AACE,aAAO,MAAP;;AACF,SAAKH,cAAc,CAACI,GAApB;AACE,aAAO,KAAP;;AACF,SAAKJ,cAAc,CAACK,KAApB;AACE,aAAO,OAAP;;AACF;AACE,aAAO,IAAP;AAZJ;AAcD,CAfM;;;;AAiBA,IAAMS,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,UAAD,EAAgB;AACnD,MAAIA,UAAU,IAAI,IAAI,IAAtB,EAA4B;AAAE;AAC5B,WAAOf,cAAc,CAACC,MAAtB;AACD,GAFD,MAEO,IAAIc,UAAU,IAAI,IAAI,EAAJ,GAAS,EAAT,GAAc,IAAhC,EAAsC;AAAE;AAC7C,WAAOf,cAAc,CAACE,MAAtB;AACD,GAFM,MAEA,IAAIa,UAAU,IAAI,IAAI,EAAJ,GAAS,EAAT,GAAc,EAAd,GAAmB,IAArC,EAA2C;AAAE;AAClD,WAAOf,cAAc,CAACG,IAAtB;AACD,GAFM,MAEA,IAAIY,UAAU,IAAI,KAAK,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,IAAtC,EAA4C;AAAE;AACnD,WAAOf,cAAc,CAACI,GAAtB;AACD;;AACD,SAAOJ,cAAc,CAACK,KAAtB;AACD,CAXM","sourcesContent":["export const QUERY_INTERVAL = {\n  SECOND: 'SECOND',\n  MINUTE: 'MINUTE',\n  HOUR: 'HOUR',\n  DAY: 'DAY',\n  MONTH: 'MONTH',\n  AUTO: 'AUTO'\n};\nexport const QUERY_INTERVAL_LIST = Object.keys(QUERY_INTERVAL).map(key => QUERY_INTERVAL[key]);\n\nexport const getMomentTimeUnitForQueryInterval = (interval) => {\n  switch (interval) {\n    case QUERY_INTERVAL.SECOND:\n      return 'second';\n    case QUERY_INTERVAL.MINUTE:\n      return 'minute';\n    case QUERY_INTERVAL.HOUR:\n      return 'hour';\n    case QUERY_INTERVAL.DAY:\n      return 'day';\n    case QUERY_INTERVAL.MONTH:\n      return 'month';\n    default:\n      return null;\n  }\n};\n\nexport const calculateAutoInterval = (intervalMs) => {\n  if (intervalMs <= 5 * 1000) { // SECOND granularity for timeframes below 5min\n    return QUERY_INTERVAL.SECOND;\n  } else if (intervalMs <= 3 * 60 * 60 * 1000) { // MINUTE granularity for timeframes below 3h\n    return QUERY_INTERVAL.MINUTE;\n  } else if (intervalMs <= 6 * 24 * 60 * 60 * 1000) { // HOUR granularity for timeframes below 6d\n    return QUERY_INTERVAL.HOUR;\n  } else if (intervalMs <= 30 * 24 * 60 * 60 * 1000) { // DAY granularity for timeframes below 30d\n    return QUERY_INTERVAL.DAY;\n  }\n  return QUERY_INTERVAL.MONTH;\n};\n"],"file":"intervals.js"}